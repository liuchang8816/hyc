<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HYC.HTPLC</name>
    </assembly>
    <members>
        <member name="T:HYC.HTPLC.Core.BasicFramework.SoftBasic">
            <summary>
            一个软件基础类，提供常用的一些静态方法
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.ArrayExpandToLength``1(``0[],System.Int32)">
            <summary>
            将一个数组进行扩充到指定长度，或是缩短到指定长度
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="data">原先数据的数据</param>
            <param name="length">新数组的长度</param>
            <returns>新数组长度信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.ArrayExpandToLengthEven``1(``0[])">
            <summary>
            将一个数组进行扩充到偶数长度
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="data">原先数据的数据</param>
            <returns>新数组长度信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.ArraySplitByLength``1(``0[],System.Int32)">
            <summary>
            将指定的数据按照指定长度进行分割，例如int[10]，指定长度4，就分割成int[4],int[4],int[2]，然后拼接list
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="array">等待分割的数组</param>
            <param name="length">指定的长度信息</param>
            <returns>分割后结果内容</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.GetEnumValues``1">
            <summary>
            获取一个枚举类型的所有枚举值，可直接应用于组合框数据
            </summary>
            <typeparam name="TEnum">枚举的类型值</typeparam>
            <returns>枚举值数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.GetEnumFromString``1(System.String)">
            <summary>
            从字符串的枚举值数据转换成真实的枚举值数据 ->
            Convert enumeration value data from strings to real enumeration value data
            </summary>
            <typeparam name="TEnum">枚举的类型值</typeparam>
            <param name="value">枚举的字符串的数据值</param>
            <returns>真实的枚举值</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.ByteToHexString(System.Byte[])">
            <summary>
            字节数据转化成16进制表示的字符串
            /// </summary>
            <param name="InBytes">字节数组</param>
            <returns>返回的字符串</returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.ByteToHexString(System.Byte[],System.Char)">
            <summary>
            字节数据转化成16进制表示的字符串
            </summary>
            <param name="InBytes">字节数组</param>
            <param name="segment">分割符</param>
            <returns>返回的字符串</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.ByteToHexString(System.String)">
            <summary>
            字符串数据转化成16进制表示的字符串
            </summary>
            <param name="InString">输入的字符串数据</param>
            <returns>返回的字符串</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.HexStringToBytes(System.String)">
            <summary>
            将16进制的字符串转化成Byte数据，将检测每2个字符转化，也就是说，中间可以是任意字符
            </summary>
            <param name="hex">十六进制的字符串，中间可以是任意的分隔符</param>
            <returns>转换后的字节数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.BytesReverseByWord(System.Byte[])">
            <summary>
            将byte数组按照双字节进行反转，如果为单数的情况，则自动补齐
            </summary>
            <param name="inBytes">输入的字节信息</param>
            <returns>反转后的数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.BytesToAsciiBytes(System.Byte[])">
            <summary>
            将原始的byte数组转换成ascii格式的byte数组
            </summary>
            <param name="inBytes">等待转换的byte数组</param>
            <returns>转换后的数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.AsciiBytesToBytes(System.Byte[])">
            <summary>
            将ascii格式的byte数组转换成原始的byte数组
            </summary>
            <param name="inBytes">等待转换的byte数组</param>
            <returns>转换后的数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.BuildAsciiBytesFrom(System.Byte)">
            <summary>
            从字节构建一个ASCII格式的数据内容
            </summary>
            <param name="value">数据</param>
            <returns>ASCII格式的字节数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.BuildAsciiBytesFrom(System.Int16)">
            <summary>
            从short构建一个ASCII格式的数据内容
            </summary>
            <param name="value">数据</param>
            <returns>ASCII格式的字节数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.BuildAsciiBytesFrom(System.UInt16)">
            <summary>
            从ushort构建一个ASCII格式的数据内容
            </summary>
            <param name="value">数据</param>
            <returns>ASCII格式的字节数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.BuildAsciiBytesFrom(System.Byte[])">
            <summary>
            从字节数组构建一个ASCII格式的数据内容
            </summary>
            <param name="value">字节信息</param>
            <returns>ASCII格式的地址</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.BoolArrayToByte(System.Boolean[])">
            <summary>
            将bool数组转换到byte数组
            </summary>
            <param name="array">bool数组</param>
            <returns>转换后的字节数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.ByteToBoolArray(System.Byte[],System.Int32)">
            <summary>
            从Byte数组中提取位数组，length代表位数
            </summary>
            <param name="InBytes">原先的字节数组</param>
            <param name="length">想要转换的长度，如果超出自动会缩小到数组最大长度</param>
            <returns>转换后的bool数组</returns> 
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.SpliceTwoByteArray(System.Byte[],System.Byte[])">
            <summary>
            拼接2个字节数组成一个数组 ->
            Splicing 2 bytes to to an array
            </summary>
            <param name="bytes1">数组一</param>
            <param name="bytes2">数组二</param>
            <returns>拼接后的数组</returns>
            <example>
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="SpliceTwoByteArray" title="SpliceTwoByteArray示例" />
            </example> 
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.BytesArrayRemoveBegin(System.Byte[],System.Int32)">
            <summary>
            将一个byte数组的前面指定位数移除，返回新的一个数组 ->
            Removes the preceding specified number of bits in a byte array, returning a new array
            </summary>
            <param name="value">字节数组</param>
            <param name="length">等待移除的长度</param>
            <returns>新的数据</returns>
            <example>
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="BytesArrayRemoveBegin" title="BytesArrayRemoveBegin示例" />
            </example> 
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.BytesArrayRemoveLast(System.Byte[],System.Int32)">
            <summary>
            将一个byte数组的后面指定位数移除，返回新的一个数组 ->
            Removes the specified number of digits after a byte array, returning a new array
            </summary>
            <param name="value">字节数组</param>
            <param name="length">等待移除的长度</param>
            <returns>新的数据</returns>
            <example>
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="BytesArrayRemoveLast" title="BytesArrayRemoveLast示例" />
            </example> 
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.BytesArrayRemoveDouble(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将一个byte数组的前后移除指定位数，返回新的一个数组 ->
            Removes a byte array before and after the specified number of bits, returning a new array
            </summary>
            <param name="value">字节数组</param>
            <param name="leftLength">前面的位数</param>
            <param name="rightLength">后面的位数</param>
            <returns>新的数据</returns>
            <example>
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="BytesArrayRemoveDouble" title="BytesArrayRemoveDouble示例" />
            </example> 
        </member>
        <member name="M:HYC.HTPLC.Core.BasicFramework.SoftBasic.GetUniqueStringByGuidAndRandom">
            <summary>
            获取一串唯一的随机字符串，长度为20，由Guid码和4位数的随机数组成，保证字符串的唯一性
            </summary>
            <returns>随机字符串数据</returns>
        </member>
        <member name="T:HYC.HTPLC.Core.Address.DeviceAddressBase">
            <summary>
            所有设备通信类的地址基础类
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.Address.DeviceAddressBase.Address">
            <summary>
            起始地址
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.Address.DeviceAddressBase.Parse(System.String)">
            <summary>
            解析字符串的地址
            </summary>
            <param name="address">地址信息</param>
        </member>
        <member name="M:HYC.HTPLC.Core.Address.DeviceAddressBase.ToString">
            <summary>
            返回表示当前对象的字符串
            </summary>
            <returns>字符串数据</returns>
        </member>
        <member name="T:HYC.HTPLC.Core.Address.DeviceAddressDataBase">
            <summary>
            设备地址数据的信息，通常包含起始地址，数据类型，长度
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.Address.DeviceAddressDataBase.AddressStart">
            <summary>
            数字的起始地址，也就是偏移地址
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.Address.DeviceAddressDataBase.Length">
            <summary>
            读取的数据长度
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.Address.DeviceAddressDataBase.Parse(System.String,System.UInt16)">
            <summary>
            从指定的地址信息解析成真正的设备地址信息
            </summary>
            <param name="address">地址信息</param>
            <param name="length">数据长度</param>
        </member>
        <member name="T:HYC.HTPLC.Core.Address.McAddressData">
            <summary>
            三菱的数据地址表示形式
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.Address.McAddressData.#ctor">
            <summary>
            实例化一个默认的对象
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.Address.McAddressData.McDataType">
            <summary>
            三菱的数据地址信息
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.Address.McAddressData.Parse(System.String,System.UInt16)">
            <summary>
            从指定的地址信息解析成真正的设备地址信息，默认是三菱的地址
            </summary>
            <param name="address">地址信息</param>
            <param name="length">数据长度</param>
        </member>
        <member name="M:HYC.HTPLC.Core.Address.McAddressData.ParseMelsecFrom(System.String,System.UInt16)">
            <summary>
            从实际三菱的地址里面解析出
            </summary>
            <param name="address">三菱的地址数据信息</param>
            <param name="length">读取的数据长度</param>
            <returns>是否成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Address.McAddressData.ParseKeyenceFrom(System.String,System.UInt16)">
            <summary>
            从实际基恩士的地址里面解析出
            </summary>
            <param name="address">基恩士的地址数据信息</param>
            <param name="length">读取的数据长度</param>
            <returns>是否成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Address.McAddressData.GetPanasonicAddress(System.String)">
            <summary>
            计算松下的MC协议的偏移地址的机制
            </summary>
            <param name="address">字符串形式的地址</param>
            <returns>实际的偏移地址</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Address.McAddressData.ParsePanasonicFrom(System.String,System.UInt16)">
            <summary>
            从实际松下的地址里面解析出
            </summary>
            <param name="address">松下的地址数据信息</param>
            <param name="length">读取的数据长度</param>
            <returns>是否成功的结果对象</returns>
        </member>
        <member name="T:HYC.HTPLC.Core.Address.S7AddressData">
            <summary>
            西门子的地址数据信息，当处于写入时，Length无效
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.Address.S7AddressData.DataCode">
            <summary>
            需要读取的数据的代码
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.Address.S7AddressData.DbBlock">
            <summary>
            PLC的DB块数据信息
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.Address.S7AddressData.Parse(System.String,System.UInt16)">
            <summary>
            从指定的地址信息解析成真正的设备地址信息
            </summary>
            <param name="address">地址信息</param>
            <param name="length">数据长度</param>
        </member>
        <member name="M:HYC.HTPLC.Core.Address.S7AddressData.CalculateAddressStarted(System.String)">
            <summary>
            计算特殊的地址信息 -> Calculate Special Address information
            </summary>
            <param name="address">字符串地址 -> String address</param>
            <returns>实际值 -> Actual value</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Address.S7AddressData.ParseFrom(System.String)">
            <summary>
            从实际的西门子的地址里面
            </summary>
            <param name="address">西门子的地址数据信息</param>
            <returns>是否成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Address.S7AddressData.ParseFrom(System.String,System.UInt16)">
            <summary>
            从实际的西门子的地址里面
            </summary>
            <param name="address">西门子的地址数据信息</param>
            <param name="length">读取的数据长度</param>
            <returns>是否成功的结果对象</returns>
        </member>
        <member name="T:HYC.HTPLC.Core.IMessage.FetchWriteMessage">
            <summary>
            西门子Fetch/Write消息解析协议
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.FetchWriteMessage.ProtocolHeadBytesLength">
            <summary>
            消息头的指令长度
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.FetchWriteMessage.GetContentLengthByHeadBytes">
            <summary>
            从当前的头子节文件中提取出接下来需要接收的数据长度
            </summary>
            <returns>返回接下来的数据内容长度</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.FetchWriteMessage.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查头子节的合法性
            </summary>
            <param name="token">特殊的令牌，有些特殊消息的验证</param>
            <returns>是否合法</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.FetchWriteMessage.GetHeadBytesIdentity">
            <summary>
            获取头子节里的消息标识
            </summary>
            <returns>消息标识</returns>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.FetchWriteMessage.HeadBytes">
            <summary>
            消息头字节
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.FetchWriteMessage.ContentBytes">
            <summary>
            消息内容字节
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.FetchWriteMessage.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Core.IMessage.FinsMessage">
            <summary>
            用于欧姆龙通信的Fins协议的消息解析规则
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.FinsMessage.ProtocolHeadBytesLength">
            <summary>
            消息头的指令长度
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.FinsMessage.GetContentLengthByHeadBytes">
            <summary>
            从当前的头子节文件中提取出接下来需要接收的数据长度
            </summary>
            <returns>返回接下来的数据内容长度</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.FinsMessage.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查头子节的合法性
            </summary>
            <param name="token">特殊的令牌，有些特殊消息的验证</param>
            <returns>是否成功的结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.FinsMessage.GetHeadBytesIdentity">
            <summary>
            获取头子节里的消息标识
            </summary>
            <returns>消息id</returns>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.FinsMessage.HeadBytes">
            <summary>
            消息头字节
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.FinsMessage.ContentBytes">
            <summary>
            消息内容字节
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.FinsMessage.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Core.IMessage.INetMessage">
            <summary>
            本系统的消息类，包含了各种解析规则，数据信息提取规则
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.INetMessage.ProtocolHeadBytesLength">
            <summary>
            消息头的指令长度
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.INetMessage.GetContentLengthByHeadBytes">
            <summary>
            从当前的头子节文件中提取出接下来需要接收的数据长度
            </summary>
            <returns>返回接下来的数据内容长度</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.INetMessage.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查头子节的合法性
            </summary>
            <param name="token">特殊的令牌，有些特殊消息的验证</param>
            <returns>是否成功的结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.INetMessage.GetHeadBytesIdentity">
            <summary>
            获取头子节里的消息标识
            </summary>
            <returns>消息标识</returns>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.INetMessage.HeadBytes">
            <summary>
            消息头字节
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.INetMessage.ContentBytes">
            <summary>
            消息内容字节
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.INetMessage.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Core.IMessage.MelsecA1EBinaryMessage">
            <summary>
            三菱的A兼容1E帧协议解析规则
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.MelsecA1EBinaryMessage.ProtocolHeadBytesLength">
            <summary>
            消息头的指令长度
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.MelsecA1EBinaryMessage.GetContentLengthByHeadBytes">
            <summary>
            从当前的头子节文件中提取出接下来需要接收的数据长度
            </summary>
            <returns>返回接下来的数据内容长度</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.MelsecA1EBinaryMessage.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查头子节的合法性
            </summary>
            <param name="token">特殊的令牌，有些特殊消息的验证</param>
            <returns></returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.MelsecA1EBinaryMessage.GetHeadBytesIdentity">
            <summary>
            获取头子节里的消息标识
            </summary>
            <returns></returns>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.MelsecA1EBinaryMessage.HeadBytes">
            <summary>
            消息头字节
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.MelsecA1EBinaryMessage.ContentBytes">
            <summary>
            消息内容字节
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.MelsecA1EBinaryMessage.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Core.IMessage.MelsecQnA3EAsciiMessage">
            <summary>
            基于MC协议的Qna兼容3E帧协议的ASCII通讯消息机制
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.MelsecQnA3EAsciiMessage.ProtocolHeadBytesLength">
            <summary>
            消息头的指令长度
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.MelsecQnA3EAsciiMessage.GetContentLengthByHeadBytes">
            <summary>
            从当前的头子节文件中提取出接下来需要接收的数据长度
            </summary>
            <returns>返回接下来的数据内容长度</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.MelsecQnA3EAsciiMessage.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查头子节的合法性
            </summary>
            <param name="token">特殊的令牌，有些特殊消息的验证</param>
            <returns>是否成功的结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.MelsecQnA3EAsciiMessage.GetHeadBytesIdentity">
            <summary>
            获取头子节里的消息标识
            </summary>
            <returns>消息标识</returns>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.MelsecQnA3EAsciiMessage.HeadBytes">
            <summary>
            消息头字节
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.MelsecQnA3EAsciiMessage.ContentBytes">
            <summary>
            消息内容字节
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.MelsecQnA3EAsciiMessage.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Core.IMessage.MelsecQnA3EBinaryMessage">
            <summary>
            三菱的Qna兼容3E帧协议解析规则
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.MelsecQnA3EBinaryMessage.ProtocolHeadBytesLength">
            <summary>
            消息头的指令长度
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.MelsecQnA3EBinaryMessage.GetContentLengthByHeadBytes">
            <summary>
            从当前的头子节文件中提取出接下来需要接收的数据长度
            </summary>
            <returns>返回接下来的数据内容长度</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.MelsecQnA3EBinaryMessage.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查头子节的合法性
            </summary>
            <param name="token">特殊的令牌，有些特殊消息的验证</param>
            <returns>是否成功的结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.MelsecQnA3EBinaryMessage.GetHeadBytesIdentity">
            <summary>
            获取头子节里的消息标识
            </summary>
            <returns>消息标识</returns>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.MelsecQnA3EBinaryMessage.HeadBytes">
            <summary>
            消息头字节
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.MelsecQnA3EBinaryMessage.ContentBytes">
            <summary>
            消息内容字节
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.MelsecQnA3EBinaryMessage.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Core.IMessage.ModbusTcpMessage">
            <summary>
            Modbus-Tcp协议支持的消息解析类
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.ModbusTcpMessage.ProtocolHeadBytesLength">
            <summary>
            消息头的指令长度
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.ModbusTcpMessage.GetContentLengthByHeadBytes">
            <summary>
            从当前的头子节文件中提取出接下来需要接收的数据长度
            </summary>
            <returns>返回接下来的数据内容长度</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.ModbusTcpMessage.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查头子节的合法性
            </summary>
            <param name="token">特殊的令牌，有些特殊消息的验证</param>
            <returns>是否成功的结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.ModbusTcpMessage.GetHeadBytesIdentity">
            <summary>
            获取头子节里的消息标识
            </summary>
            <returns>消息标识</returns>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.ModbusTcpMessage.HeadBytes">
            <summary>
            消息头字节
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.ModbusTcpMessage.ContentBytes">
            <summary>
            消息内容字节
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.ModbusTcpMessage.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Core.IMessage.S7Message">
            <summary>
            西门子S7协议的消息解析规则
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.S7Message.ProtocolHeadBytesLength">
            <summary>
            西门子头字节的长度
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.S7Message.HeadBytes">
            <summary>
            头子节的数据
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.S7Message.ContentBytes">
            <summary>
            内容字节的数据
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.S7Message.CheckHeadBytesLegal(System.Byte[])">
            <summary>
            检查头子节是否合法的判断
            </summary>
            <param name="token">令牌</param>
            <returns>是否合法的</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.S7Message.GetContentLengthByHeadBytes">
            <summary>
            获取剩余的内容长度
            </summary>
            <returns>数据内容长度</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IMessage.S7Message.GetHeadBytesIdentity">
            <summary>
            获取消息号，此处无效
            </summary>
            <returns>消息标识</returns>
        </member>
        <member name="P:HYC.HTPLC.Core.IMessage.S7Message.SendBytes">
            <summary>
            发送的字节信息
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Core.IReadWriteNet">
            <summary>
            所有的和设备或是交互类统一读写标准
            </summary>
            <remarks>
            Modbus类，PLC类均实现了本接口，可以基于本接口实现统一所有的不同种类的设备的数据交互
            </remarks> 
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Read(System.String,System.UInt16)">
            <summary>
            批量读取底层的数据信息，需要指定地址和长度，具体的结果取决于实现
            </summary>
            <param name="address">数据地址</param>
            <param name="length">数据长度</param>
            <returns>带有成功标识的byte[]数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadInt16(System.String)">
            <summary>
            读取16位的有符号整型
            </summary>
            <param name="address">起始地址</param>
            <returns>带有成功标识的short数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadInt16(System.String,System.UInt16)">
            <summary>
            读取16位的有符号整型数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的数组长度</param>
            <returns>带有成功标识的short数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadUInt16(System.String)">
            <summary>
            读取16位的无符号整型
            </summary>
            <param name="address">起始地址</param>
            <returns>带有成功标识的ushort数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadUInt16(System.String,System.UInt16)">
            <summary>
            读取16位的无符号整型数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的数组长度</param>
            <returns>带有成功标识的ushort数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadInt32(System.String)">
            <summary>
            读取32位的有符号整型
            </summary>
            <param name="address">起始地址</param>
            <returns>带有成功标识的int数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadInt32(System.String,System.UInt16)">
            <summary>
            读取32位有符号整型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadUInt32(System.String)">
            <summary>
            读取32位的无符号整型
            </summary>
            <param name="address">起始地址</param>
            <returns>带有成功标识的uint数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadUInt32(System.String,System.UInt16)">
            <summary>
            读取设备的uint类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadInt64(System.String)">
            <summary>
            读取64位的有符号整型
            </summary>
            <param name="address">起始地址</param>
            <returns>带有成功标识的long数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadInt64(System.String,System.UInt16)">
            <summary>
            读取64位的有符号整型数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadUInt64(System.String)">
            <summary>
            读取64位的无符号整型
            </summary>
            <param name="address">起始地址</param>
            <returns>带有成功标识的ulong数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadUInt64(System.String,System.UInt16)">
            <summary>
            读取64位的无符号整型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadFloat(System.String)">
            <summary>
            读取单浮点精度的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带有成功标识的float数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadFloat(System.String,System.UInt16)">
            <summary>
            读取单浮点精度的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadDouble(System.String)">
            <summary>
            读取双浮点精度的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带有成功标识的double数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadDouble(System.String,System.UInt16)">
            <summary>
            读取双浮点精度的数据的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadString(System.String,System.UInt16)">
            <summary>
            读取字符串数据，
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数据长度</param>
            <returns>带有成功标识的string数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadCustomer``1(System.String)">
            <summary>
            读取自定义的数据类型，需要继承自IDataTransfer接口
            </summary>
            <typeparam name="T">自定义的类型</typeparam>
            <param name="address">起始地址</param>
            <returns>带有成功标识的自定义类型数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.Byte[])">
            <summary>
            写入byte数组数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.Int16)">
            <summary>
            写入short数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.Int16[])">
            <summary>
            写入short数组
            </summary>
            <param name="address">起始地址</param>
            <param name="values">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.UInt16)">
            <summary>
            写入ushort数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.UInt16[])">
            <summary>
            写入ushort数组
            </summary>
            <param name="address">起始地址</param>
            <param name="values">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.Int32)">
            <summary>
            写入int数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.Int32[])">
            <summary>
            写入int[]数组
            </summary>
            <param name="address">起始地址</param>
            <param name="values">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.UInt32)">
            <summary>
            写入uint数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.UInt32[])">
            <summary>
            写入uint[]数组
            </summary>
            <param name="address">起始地址</param>
            <param name="values">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.Int64)">
            <summary>
            写入long数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.Int64[])">
            <summary>
            写入long数组
            </summary>
            <param name="address">起始地址</param>
            <param name="values">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.UInt64)">
            <summary>
            写入ulong数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.UInt64[])">
            <summary>
            写入ulong数组
            </summary>
            <param name="address">起始地址</param>
            <param name="values">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.Single)">
            <summary>
            写入float数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.Single[])">
            <summary>
            写入float数组
            </summary>
            <param name="address">起始地址</param>
            <param name="values">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.Double)">
            <summary>
            写入double数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.Double[])">
            <summary>
            写入double数组
            </summary>
            <param name="address">起始地址</param>
            <param name="values">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.String)">
            <summary>
            写入字符串信息，编码为ASCII
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.String,System.Int32)">
            <summary>
            写入指定长度的字符串信息，编码为ASCII
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <param name="length">字符串的长度</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadBool(System.String,System.UInt16)">
            <summary>
            批量读取底层的数据信息，需要指定地址和长度，具体的结果取决于实现
            </summary>
            <param name="address">数据地址</param>
            <param name="length">数据长度</param>
            <returns>带有成功标识的byte[]数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadBoolByWord(System.String,System.UInt16)">
            <summary>
            批量读取底层的数据信息，需要指定地址和长度，具体的结果取决于实现
            </summary>
            <param name="address">数据地址</param>
            <param name="length">数据长度</param>
            <returns>带有成功标识的byte[]数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.ReadBool(System.String)">
            <summary>
            读取底层的bool数据信息，具体的结果取决于实现
            </summary>
            <param name="address">数据地址</param>
            <returns>带有成功标识的byte[]数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.Boolean[])">
            <summary>
            写入bool数组数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IReadWriteNet.Write(System.String,System.Boolean)">
            <summary>
            写入bool数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="T:HYC.HTPLC.Core.NetSupport">
            <summary>
            静态的方法支持类，提供一些网络的静态支持，支持从套接字从同步接收指定长度的字节数据，并支持报告进度。
            </summary>
            <remarks>
            在接收指定数量的字节数据的时候，如果一直接收不到，就会发生假死的状态。接收的数据时保存在内存里的，不适合大数据块的接收。
            </remarks> 
        </member>
        <member name="F:HYC.HTPLC.Core.NetSupport.SocketBufferSize">
            <summary>
            Socket传输中的缓冲池大小
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.NetSupport.ThreadPoolCheckConnect(HYC.HTPLC.HycTimeOut,System.Int32)">
            <summary>
            检查是否超时的静态方法
            </summary>
            <param name="timeout">数据封送对象</param>
            <param name="millisecond">超时的时间</param>
        </member>
        <member name="M:HYC.HTPLC.Core.NetSupport.ThreadPoolCheckTimeOut(System.Object)">
            <summary>
            检查是否超时的方法信息
            </summary>
            <param name="obj">socket对象</param>
        </member>
        <member name="M:HYC.HTPLC.Core.NetSupport.ReadBytesFromSocket(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            读取socket数据的基础方法，只适合用来接收指令头，或是同步数据
            </summary>
            <param name="socket">通信对象</param>
            <param name="receive">接收的长度</param>
            <returns>接收到的字节数据</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <example>
            接收数据的举例，简单的接收20个字节长度的数据。
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetSupport.cs" region="ReadBytesFromSocketExample1" title="ReadBytesFromSocket示例" />
            如何接收不定长度的数据呢？我们可以将一条数据拆分成2次接收，第一次是接收8个固定的字节，解析成长度，再接收真实的数据。
             <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetSupport.cs" region="ReadBytesFromSocketExample3" title="ReadBytesFromSocket示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.NetSupport.ReadBytesFromSocket(System.Net.Sockets.Socket,System.Int32,System.Action{System.Int64,System.Int64},System.Boolean,System.Boolean)">
            <summary>
            读取socket数据的基础方法，只适合用来接收指令头，或是同步数据
            </summary>
            <param name="socket">通信对象</param>
            <param name="receive">接收的长度</param>
            <param name="report">用于报告接收进度的对象</param>
            <param name="reportByPercent">是否按照百分比报告进度</param>
            <param name="response">是否回发接收数据长度</param>
            <returns>接收到的字节数据</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <example>
            接收数据的举例，输出报告，不根据百分比来产生报告，不回复接收进度。
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetSupport.cs" region="ReadBytesFromSocketExample2" title="ReadBytesFromSocket示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.NetSupport.ReceiveCommandLineFromSocket(System.Net.Sockets.Socket,System.Byte)">
            <summary>
            接收一行命令数据，需要自己指定这个结束符
            </summary>
            <param name="socket">网络套接字</param>
            <param name="endCode">结束符信息</param>
            <returns>带有结果对象的数据信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.NetSupport.ReceiveCommandLineFromSocket(System.Net.Sockets.Socket,System.Byte,System.Byte)">
            <summary>
            接收一行命令数据，需要自己指定这个结束符
            </summary>
            <param name="socket">网络套接字</param>
            <param name="endCode1">结束符1信息</param>
            <param name="endCode2">结束符2信息</param>
            <returns>带有结果对象的数据信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.NetSupport.WriteStreamFromSocket(System.Net.Sockets.Socket,System.IO.Stream,System.Int64,System.Action{System.Int64,System.Int64},System.Boolean)">
            <summary>
            从socket套接字读取数据并写入流中，必然报告进度
            </summary>
            <param name="socket">通信对象</param>
            <param name="stream">stream</param>
            <param name="receive">接收的长度</param>
            <param name="report">用于报告接收进度的对象</param>
            <param name="reportByPercent">是否按照百分比报告进度</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <example>
            举例从socket读取数据，然后写入到文件流中
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetSupport.cs" region="WriteStreamFromSocketExample" title="WriteStreamFromSocket示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.NetSupport.WriteSocketFromStream(System.Net.Sockets.Socket,System.IO.Stream,System.Int64,System.Action{System.Int64,System.Int64},System.Boolean)">
            <summary>
            读取流并将数据写入socket
            </summary>
            <param name="stream">文件流</param>
            <param name="socket">连接的套接字</param>
            <param name="length">返回的文件长度</param>
            <param name="report">发送的进度报告</param>
            <param name="reportByPercent">是否按照百分比报告进度</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <example>
            举例从文件读取数据，然后写入到套接字中，相当于发送文件到socket
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetSupport.cs" region="WriteSocketFromStreamExample" title="WriteSocketFromStream示例" />
            </example>
        </member>
        <member name="T:HYC.HTPLC.Core.Net.NetworkBase">
            <summary>
            本系统所有网络类的基类，该类为抽象类，无法进行实例化
            </summary>
            <remarks>
            network base class, support basic operation with socket
            </remarks>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkBase.#ctor">
            <summary>
            实例化一个NetworkBase对象
            </summary>
            <remarks>
            令牌的默认值为空，都是0x00
            </remarks>
        </member>
        <member name="P:HYC.HTPLC.Core.Net.NetworkBase.Token">
            <summary>
            网络类的身份令牌
            </summary>
            <remarks>
            适用于Hsl协议相关的网络通信类，不适用于设备交互类。
            </remarks>
        </member>
        <member name="F:HYC.HTPLC.Core.Net.NetworkBase.CoreSocket">
            <summary>
            通讯类的核心套接字
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkBase.ThreadPoolCheckTimeOut(System.Object)">
            <summary>
            检查网络套接字是否操作超时，需要对套接字进行封装
            </summary>
            <param name="obj">通常是 <see cref="T:HYC.HTPLC.HycTimeOut"/> 对象 </param>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkBase.Receive(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            接收固定长度的字节数组
            </summary>
            <remarks>
            Receive Special Length Bytes
            </remarks>
            <param name="socket">网络通讯的套接字</param>
            <param name="length">准备接收的数据长度</param>
            <returns>包含了字节数据的结果类</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkBase.ReceiveByMessage(System.Net.Sockets.Socket,System.Int32,HYC.HTPLC.Core.IMessage.INetMessage)">
            <summary>
            接收一条完整的 <seealso cref="T:HYC.HTPLC.Core.IMessage.INetMessage"/> 数据内容 ->
            Receive a complete <seealso cref="T:HYC.HTPLC.Core.IMessage.INetMessage"/> data content
            </summary>
            <param name="socket">网络的套接字</param>
            <param name="timeOut">超时时间</param>
            <param name="netMessage">消息的格式定义</param>
            <returns>带有是否成功的byte数组对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkBase.Send(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            发送消息给套接字，直到完成的时候返回
            </summary>
            <param name="socket">网络套接字</param>
            <param name="data">字节数据</param>
            <returns>发送是否成功的结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkBase.CreateSocketAndConnect(System.String,System.Int32)">
            <summary>
            创建一个新的socket对象并连接到远程的地址，默认超时时间为10秒钟
            </summary>
            <param name="ipAddress">Ip地址</param>
            <param name="port">端口号</param>
            <returns>返回套接字的封装结果对象</returns> 
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkBase.CreateSocketAndConnect(System.String,System.Int32,System.Int32)">
            <summary>
            创建一个新的socket对象并连接到远程的地址
            </summary>
            <param name="ipAddress">Ip地址</param>
            <param name="port">端口号</param>
            <param name="timeOut">连接的超时时间</param>
            <returns>返回套接字的封装结果对象</returns> 
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkBase.CreateSocketAndConnect(System.Net.IPEndPoint,System.Int32)">
            <summary>
            创建一个新的socket对象并连接到远程的地址
            </summary>
            <param name="endPoint">连接的目标终结点</param>
            <param name="timeOut">连接的超时时间</param>
            <returns>返回套接字的封装结果对象</returns> 
        </member>
        <member name="T:HYC.HTPLC.Core.Net.NetworkDeviceBase`2">
            <summary>
            设备类的基类，提供了基础的字节读写方法
            </summary>
            <typeparam name="TNetMessage">指定了消息的解析规则</typeparam>
            <typeparam name="TTransform">指定了数据转换的规则</typeparam>
            <remarks>需要继承实现采用使用。</remarks>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Read(System.String,System.UInt16)">
            <summary>
            从设备读取原始数据
            </summary>
            <param name="address">起始地址</param>
            <param name="length">地址长度</param>
            <returns>带有成功标识的结果对象</returns>
            <remarks>需要在继承类中重写实现，并且实现地址解析操作</remarks>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.Byte[])">
            <summary>
            将原始数据写入设备
            </summary>
            <param name="address">起始地址</param>
            <param name="value">原始数据</param>
            <returns>带有成功标识的结果对象</returns>
            <remarks>需要在继承类中重写实现，并且实现地址解析操作</remarks>
        </member>
        <member name="P:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WordLength">
            <summary>
            单个数据字节的长度，西门子为2，三菱，欧姆龙，modbusTcp就为1，AB PLC无效
            </summary>
            <remarks>对设备来说，一个地址的数据对应的字节数，或是1个字节或是2个字节</remarks>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadCustomer``1(System.String)">
            <summary>
            读取自定义类型的数据，需要规定解析规则
            </summary>
            <typeparam name="T">类型名称</typeparam>
            <param name="address">起始地址</param>
            <returns>带有成功标识的结果对象</returns>
            <remarks>
            需要是定义一个类，选择好相对于的ByteTransform实例，才能调用该方法。
            </remarks> 
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteCustomer``1(System.String,``0)">
            <summary>
            写入自定义类型的数据到设备去，需要规定生成字节的方法
            </summary>
            <typeparam name="T">自定义类型</typeparam>
            <param name="address">起始地址</param>
            <param name="data">实例对象</param>
            <returns>带有成功标识的结果对象</returns>
            <remarks>
            需要是定义一个类，选择好相对于的<see cref="T:HYC.HTPLC.IDataTransfer"/>实例，才能调用该方法。
            </remarks>
            <example>
            此处演示三菱的读取示例，先定义一个类，实现<see cref="T:HYC.HTPLC.IDataTransfer"/>接口
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="IDataTransfer Example" title="DataMy示例" />
            接下来就可以实现数据的读取了
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteCustomerExample" title="WriteCustomer示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadInt16(System.String)">
            <summary>
            读取设备的short类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadInt16" title="Int16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadInt16(System.String,System.UInt16)">
            <summary>
            读取设备的short类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadInt16Array" title="Int16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadUInt16(System.String)">
            <summary>
            读取设备的ushort数据类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadUInt16" title="UInt16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadUInt16(System.String,System.UInt16)">
            <summary>
            读取设备的ushort类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadUInt16Array" title="UInt16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadInt32(System.String)">
            <summary>
            读取设备的int类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadInt32" title="Int32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadInt32(System.String,System.UInt16)">
            <summary>
            读取设备的int类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadInt32Array" title="Int32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadUInt32(System.String)">
            <summary>
            读取设备的uint类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadUInt32" title="UInt32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadUInt32(System.String,System.UInt16)">
            <summary>
            读取设备的uint类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadUInt32Array" title="UInt32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadFloat(System.String)">
            <summary>
            读取设备的float类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadFloat" title="Float类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadFloat(System.String,System.UInt16)">
            <summary>
            读取设备的float类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadFloatArray" title="Float类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadInt64(System.String)">
            <summary>
            读取设备的long类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadInt64" title="Int64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadInt64(System.String,System.UInt16)">
            <summary>
            读取设备的long类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadInt64Array" title="Int64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadUInt64(System.String)">
            <summary>
            读取设备的ulong类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadUInt64" title="UInt64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadUInt64(System.String,System.UInt16)">
            <summary>
            读取设备的ulong类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadUInt64Array" title="UInt64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadDouble(System.String)">
            <summary>
            读取设备的double类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadDouble" title="Double类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadDouble(System.String,System.UInt16)">
            <summary>
            读取设备的double类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadDoubleArray" title="Double类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadString(System.String,System.UInt16)">
            <summary>
            读取设备的字符串数据，编码为ASCII
            </summary>
            <param name="address">起始地址</param>
            <param name="length">地址长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadString" title="String类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadString(System.String,System.UInt16,System.Text.Encoding)">
            <summary>
            读取设备的字符串数据，编码为指定的编码信息
            </summary>
            <param name="address">起始地址</param>
            <param name="length">地址长度</param>
            <param name="encoding">编码机制</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadString" title="String类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadBool(System.String,System.UInt16)">
            <summary>
            批量读取底层的数据信息，需要指定地址和长度，具体的结果取决于实现
            </summary>
            <param name="address">数据地址</param>
            <param name="length">数据长度</param>
            <returns>带有成功标识的bool[]数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadBool(System.String)">
            <summary>
            读取底层的bool数据信息，具体的结果取决于实现
            </summary>
            <param name="address">数据地址</param>
            <returns>带有成功标识的bool数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.Boolean[])">
            <summary>
            写入bool数组数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.Boolean)">
            <summary>
            写入bool数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadBoolAsync(System.String,System.UInt16)">
            <summary>
            批量读取底层的数据信息，需要指定地址和长度，具体的结果取决于实现
            </summary>
            <param name="address">数据地址</param>
            <param name="length">数据长度</param>
            <returns>带有成功标识的bool[]数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadBoolAsync(System.String)">
            <summary>
            读取底层的bool数据信息，具体的结果取决于实现
            </summary>
            <param name="address">数据地址</param>
            <returns>带有成功标识的bool数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.Boolean[])">
            <summary>
            写入bool数组数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.Boolean)">
            <summary>
            写入bool数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadAsync(System.String,System.UInt16)">
            <summary>
            使用异步的操作从原始的设备中读取数据信息
            </summary>
            <param name="address">起始地址</param>
            <param name="length">地址长度</param>
            <returns>带有成功标识的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadInt16Async(System.String)">
            <summary>
            异步读取设备的short类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadInt16Async" title="Int16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadInt16Async(System.String,System.UInt16)">
            <summary>
            异步读取设备的ushort类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadInt16ArrayAsync" title="Int16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadUInt16Async(System.String)">
            <summary>
            异步读取设备的ushort数据类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadUInt16Async" title="UInt16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadUInt16Async(System.String,System.UInt16)">
            <summary>
            异步读取设备的ushort类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadUInt16ArrayAsync" title="UInt16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadInt32Async(System.String)">
            <summary>
            异步读取设备的int类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadInt32Async" title="Int32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadInt32Async(System.String,System.UInt16)">
            <summary>
            异步读取设备的int类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadInt32ArrayAsync" title="Int32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadUInt32Async(System.String)">
            <summary>
            异步读取设备的uint类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadUInt32Async" title="UInt32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadUInt32Async(System.String,System.UInt16)">
            <summary>
            异步读取设备的uint类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadUInt32ArrayAsync" title="UInt32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadFloatAsync(System.String)">
            <summary>
            异步读取设备的float类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadFloatAsync" title="Float类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadFloatAsync(System.String,System.UInt16)">
            <summary>
            异步读取设备的float类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadFloatArrayAsync" title="Float类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadInt64Async(System.String)">
            <summary>
            异步读取设备的long类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadInt64Async" title="Int64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadInt64Async(System.String,System.UInt16)">
            <summary>
            异步读取设备的long类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadInt64ArrayAsync" title="Int64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadUInt64Async(System.String)">
            <summary>
            异步读取设备的ulong类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadUInt64Async" title="UInt64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadUInt64Async(System.String,System.UInt16)">
            <summary>
            异步读取设备的ulong类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadUInt64ArrayAsync" title="UInt64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadDoubleAsync(System.String)">
            <summary>
            异步读取设备的double类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadDoubleAsync" title="Double类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadDoubleAsync(System.String,System.UInt16)">
            <summary>
            异步读取设备的double类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadDoubleArrayAsync" title="Double类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadStringAsync(System.String,System.UInt16)">
            <summary>
            异步读取设备的字符串数据，编码为ASCII
            </summary>
            <param name="address">起始地址</param>
            <param name="length">地址长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadStringAsync" title="String类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadStringAsync(System.String,System.UInt16,System.Text.Encoding)">
            <summary>
            读取设备的字符串数据，编码为指定的编码信息
            </summary>
            <param name="address">起始地址</param>
            <param name="length">地址长度</param>
            <param name="encoding">编码机制</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadStringAsync" title="String类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.Byte[])">
            <summary>
            异步将原始数据写入设备
            </summary>
            <param name="address">起始地址</param>
            <param name="value">原始数据</param>
            <returns>带有成功标识的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteAsync" title="bytes类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.Int16[])">
            <summary>
            异步向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteInt16ArrayAsync" title="Int16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.Int16)">
            <summary>
            异步向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteInt16Async" title="Int16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.UInt16[])">
            <summary>
            异步向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteUInt16ArrayAsync" title="UInt16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.UInt16)">
            <summary>
            异步向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteUInt16Async" title="UInt16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.Int32[])">
            <summary>
            异步向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteInt32ArrayAsync" title="Int32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.Int32)">
            <summary>
            异步向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteInt32Async" title="Int32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.UInt32[])">
            <summary>
            异步向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteUInt32ArrayAsync" title="UInt32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.UInt32)">
            <summary>
            异步向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteUInt32Async" title="UInt32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.Single[])">
            <summary>
            异步向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteFloatArrayAsync" title="Float类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.Single)">
            <summary>
            异步向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteFloatAsync" title="Float类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.Int64[])">
            <summary>
            异步向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteInt64ArrayAsync" title="Int64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.Int64)">
            <summary>
            异步向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteInt64Async" title="Int64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.UInt64[])">
            <summary>
            异步向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteUInt64ArrayAsync" title="UInt64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.UInt64)">
            <summary>
            异步向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteUInt64Async" title="UInt64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.Double[])">
            <summary>
            异步向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteDoubleArrayAsync" title="Double类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.Double)">
            <summary>
            异步向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteDoubleAsync" title="Double类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.String)">
            <summary>
            异步向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteStringAsync" title="String类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.String,System.Text.Encoding)">
            <summary>
            异步向设备中写入字符串，使用指定的字符编码
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="encoding">字符编码</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteStringAsync" title="String类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.String,System.Int32)">
            <summary>
            异步向设备中写入指定长度的字符串,超出截断，不够补0，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteString2Async" title="String类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync(System.String,System.String,System.Int32,System.Text.Encoding)">
            <summary>
            异步向设备中写入指定长度的字符串,超出截断，不够补0，指定的编码格式
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <param name="encoding">指定的编码格式</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteString2Async" title="String类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteUnicodeStringAsync(System.String,System.String)">
            <summary>
            异步向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteUnicodeStringAsync(System.String,System.String,System.Int32)">
            <summary>
            异步向设备中写入指定长度的字符串,超出截断，不够补0，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadCustomerAsync``1(System.String)">
            <summary>
            异步读取自定义类型的数据，需要规定解析规则
            </summary>
            <typeparam name="T">类型名称</typeparam>
            <param name="address">起始地址</param>
            <returns>带有成功标识的结果对象</returns>
            <remarks>
            需要是定义一个类，选择好相对于的ByteTransform实例，才能调用该方法。
            </remarks>
            <example>
            此处演示三菱的读取示例，先定义一个类，实现<see cref="T:HYC.HTPLC.IDataTransfer"/>接口
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="IDataTransfer Example" title="DataMy示例" />
            接下来就可以实现数据的读取了
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadCustomerAsyncExample" title="ReadCustomerAsync示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteCustomerAsync``1(System.String,``0)">
            <summary>
            异步写入自定义类型的数据到设备去，需要规定生成字节的方法
            </summary>
            <typeparam name="T">自定义类型</typeparam>
            <param name="address">起始地址</param>
            <param name="data">实例对象</param>
            <returns>带有成功标识的结果对象</returns>
            <remarks>
            需要是定义一个类，选择好相对于的<see cref="T:HYC.HTPLC.IDataTransfer"/>实例，才能调用该方法。
            </remarks>
            <example>
            此处演示三菱的读取示例，先定义一个类，实现<see cref="T:HYC.HTPLC.IDataTransfer"/>接口
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="IDataTransfer Example" title="DataMy示例" />
            接下来就可以实现数据的读取了
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteCustomerAsyncExample" title="WriteCustomerAsync示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ReadAsync``1">
            <summary>
            异步从设备里读取支持Hsl特性的数据内容，该特性为<see cref="T:HYC.HTPLC.HycDeviceAddressAttribute"/>，详细参考论坛的操作说明。
            </summary>
            <typeparam name="T">自定义的数据类型对象</typeparam>
            <returns>包含是否成功的结果对象</returns>
            <example>
            此处演示西门子的读取示例，先定义一个类，重点是将需要读取的数据，写入到属性的特性中去。
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ObjectDefineExample" title="特性实现示例" />
            接下来就可以实现数据的读取了
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadObjectAsyncExample" title="ReadObjectAsync示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteAsync``1(``0)">
            <summary>
            异步从设备里读取支持Hsl特性的数据内容，该特性为<see cref="T:HYC.HTPLC.HycDeviceAddressAttribute"/>，详细参考论坛的操作说明。
            </summary>
            <typeparam name="T">自定义的数据类型对象</typeparam>
            <returns>包含是否成功的结果对象</returns>
            <example>
            此处演示西门子的读取示例，先定义一个类，重点是将需要读取的数据，写入到属性的特性中去。
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ObjectDefineExample" title="特性实现示例" />
            接下来就可以实现数据的写入了
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteObjectAsyncExample" title="WriteObjectAsync示例" />
            </example>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.Int16[])">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteInt16Array" title="Int16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.Int16)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteInt16" title="Int16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.UInt16[])">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteUInt16Array" title="UInt16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.UInt16)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteUInt16" title="UInt16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.Int32[])">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteInt32Array" title="Int32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteInt32" title="Int32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.UInt32[])">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteUInt32Array" title="UInt32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.UInt32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteUInt32" title="UInt32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.Single[])">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteFloatArray" title="Float类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.Single)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteFloat" title="Float类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.Int64[])">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteInt64Array" title="Int64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.Int64)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteInt64" title="Int64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.UInt64[])">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteUInt64Array" title="UInt64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.UInt64)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteUInt64" title="UInt64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.Double[])">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns> 
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.Double)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteDouble" title="Double类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteString" title="String类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.String,System.Text.Encoding)">
            <summary>
            向设备中写入指定编码的字符串
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="encoding">字节编码</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteString" title="String类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.String,System.Int32)">
            <summary>
            向设备中写入指定长度的字符串,超出截断，不够补0，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteString2" title="String类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.Write(System.String,System.String,System.Int32,System.Text.Encoding)">
            <summary>
            向设备中写入指定长度并且指定编码的字符串,超出截断，不够补0
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="length">指定的长度，按照转换后的字节计算</param>
            <param name="encoding">字符编码</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteString2" title="String类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteUnicodeString(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.WriteUnicodeString(System.String,System.String,System.Int32)">
            <summary>
            向设备中写入指定长度的字符串,超出截断，不够补0，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDeviceBase`2.ToString">
            <summary>
            返回表示当前对象的字符串
            </summary>
            <returns>字符串数据</returns>
        </member>
        <member name="T:HYC.HTPLC.Core.Net.NetworkDoubleBase`2">
            <summary>
            支持长连接，短连接两个模式的通用客户端基类
            </summary> 
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.#ctor">
            <summary>
            默认的无参构造函数 -> Default no-parameter constructor
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.receiveTimeOut">
            <summary>
            接收数据的超时时间
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.isPersistentConn">
            <summary>
            是否是长连接的状态
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.InteractiveLock">
            <summary>
            交互的混合锁
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.IsSocketError">
            <summary>
            当前的socket是否发生了错误
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.ByteTransform">
            <summary>
            当前客户端的数据变换机制，当你需要从字节数据转换类型数据的时候需要。->
            The current client's data transformation mechanism is required when you need to convert type data from byte data.
            </summary> 
        </member>
        <member name="P:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.ConnectTimeOut">
            <summary>
            获取或设置连接的超时时间，单位是毫秒 -> Gets or sets the timeout for the connection, in milliseconds
            </summary> 
            <remarks>
            不适用于异形模式的连接。
            </remarks>
        </member>
        <member name="P:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.ReceiveTimeOut">
            <summary>
            获取或设置接收服务器反馈的时间，如果为负数，则不接收反馈 -> 
            Gets or sets the time to receive server feedback, and if it is a negative number, does not receive feedback
            </summary>
            <example>
            设置1秒的接收超时的示例
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDoubleBase.cs" region="ReceiveTimeOutExample" title="ReceiveTimeOut示例" />
            </example>
            <remarks>
            超时的通常原因是服务器端没有配置好，导致访问失败，为了不卡死软件，所以有了这个超时的属性。
            </remarks>
        </member>
        <member name="P:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.IpAddress">
            <summary>
            获取或是设置服务器的IP地址
            </summary>
            <remarks>
            最好实在初始化的时候进行指定，当使用短连接的时候，支持动态更改，切换；当使用长连接后，无法动态更改
            </remarks>
            <example>
            以下举例modbus-tcp的短连接及动态更改ip地址的示例
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDoubleBase.cs" region="IpAddressExample" title="IpAddress示例" />
            </example>
        </member>
        <member name="P:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.Port">
            <summary>
            获取或设置服务器的端口号
            </summary>
            <remarks>
            最好实在初始化的时候进行指定，当使用短连接的时候，支持动态更改，切换；当使用长连接后，无法动态更改
            </remarks>
            <example>
            动态更改请参照IpAddress属性的更改。
            </example>
        </member>
        <member name="P:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.ConnectionId">
            <summary>
            当前连接的唯一ID号，默认为长度20的guid码加随机数组成，方便列表管理，也可以自己指定
            </summary>
            <remarks>
            Current Connection ID, conclude guid and random data, also, you can spcified
            </remarks>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.SetPersistentConnection">
            <summary>
            在读取数据之前可以调用本方法将客户端设置为长连接模式，相当于跳过了ConnectServer的结果验证，对异形客户端无效
            </summary>
            <example>
            以下的方式演示了另一种长连接的机制
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDoubleBase.cs" region="SetPersistentConnectionExample" title="SetPersistentConnection示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.ConnectServer">
            <summary>
            切换短连接模式到长连接模式，后面的每次请求都共享一个通道
            </summary>
            <returns>返回连接结果，如果失败的话（也即IsSuccess为False），包含失败信息</returns> 
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.ConnectClose">
            <summary>
            在长连接模式下，断开服务器的连接，并切换到短连接模式
            </summary>
            <returns>关闭连接，不需要查看IsSuccess属性查看</returns> 
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.InitializationOnConnect(System.Net.Sockets.Socket)">
            <summary>
            连接上服务器后需要进行的初始化操作
            </summary>
            <param name="socket">网络套接字</param>
            <returns>是否初始化成功，依据具体的协议进行重写</returns> 
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.ExtraOnDisconnect(System.Net.Sockets.Socket)">
            <summary>
            在将要和服务器进行断开的情况下额外的操作，需要根据对应协议进行重写
            </summary>
            <param name="socket">网络套接字</param>
            <example>
            目前暂无相关的示例，组件支持的协议都不用实现这个方法。
            </example>
            <returns>当断开连接时额外的操作结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.ExtraAfterReadFromCoreServer(HYC.HTPLC.OperateResult)">
            <summary>
            和服务器交互完成的时候调用的方法，无论是成功或是失败，都将会调用，具体的操作需要重写实现
            </summary>
            <param name="read">读取结果</param>
        </member>
        <member name="F:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.isUseAccountCertificate">
            <summary>
            是否使用账号登录
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.SetLoginAccount(System.String,System.String)">
            <summary>
            设置当前的登录的账户名和密码信息，账户名为空时设置不生效
            </summary>
            <param name="userName">账户名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.GetAvailableSocket">
            <summary>
            获取本次操作的可用的网络套接字
            </summary>
            <returns>是否成功，如果成功，使用这个套接字</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.CreateSocketAndInitialication">
            <summary>
            连接并初始化网络套接字
            </summary>
            <returns>带有socket的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.ReadFromCoreServer(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            在其他指定的套接字上，使用报文来通讯，传入需要发送的消息，返回一条完整的数据指令
            </summary>
            <param name="socket">指定的套接字</param>
            <param name="send">发送的完整的报文信息</param>
            <remarks>
            无锁的基于套接字直接进行叠加协议的操作。
            </remarks> 
            <returns>接收的完整的报文信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.ReadFromCoreServer(System.Byte[])">
            <summary>
            使用底层的数据报文来通讯，传入需要发送的消息，返回一条完整的数据指令
            </summary>
            <param name="send">发送的完整的报文信息</param>
            <returns>接收的完整的报文信息</returns>
            <remarks>
            本方法用于实现本组件还未实现的一些报文功能，例如有些modbus服务器会有一些特殊的功能码支持，需要收发特殊的报文，详细请看示例
            </remarks> 
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.Dispose(System.Boolean)">
            <summary>
            释放当前的资源，并自动关闭长连接，如果设置了的话
            </summary>
            <param name="disposing">是否释放托管的资源信息</param>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.Dispose">
            <summary>
            释放当前的资源
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.Net.NetworkDoubleBase`2.ToString">
            <summary>
            返回表示当前对象的字符串
            </summary>
            <returns>字符串信息</returns>
        </member>
        <member name="T:HYC.HTPLC.Core.HycReflectionHelper">
            <summary>
            反射的辅助类
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.HycReflectionHelper.Read``1(HYC.HTPLC.Core.IReadWriteNet)">
            <summary>
            从设备里读取支持Hsl特性的数据内容，该特性为<see cref="T:HYC.HTPLC.HycDeviceAddressAttribute"/>，详细参考论坛的操作说明。
            </summary>
            <typeparam name="T">自定义的数据类型对象</typeparam>
            <param name="readWrite">读写接口的实现</param>
            <returns>包含是否成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.HycReflectionHelper.Write``1(``0,HYC.HTPLC.Core.IReadWriteNet)">
            <summary>
            从设备里读取支持Hsl特性的数据内容，该特性为<see cref="T:HYC.HTPLC.HycDeviceAddressAttribute"/>，详细参考论坛的操作说明。
            </summary>
            <typeparam name="T">自定义的数据类型对象</typeparam>
            <param name="data">自定义的数据对象</param>
            <param name="readWrite">数据读写对象</param>
            <returns>包含是否成功的结果对象</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:HYC.HTPLC.Core.SimpleHybirdLock">
            <summary>
            一个简单的混合线程同步锁，采用了基元用户加基元内核同步构造实现
            </summary> 
        </member>
        <member name="M:HYC.HTPLC.Core.SimpleHybirdLock.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Core.SimpleHybirdLock.m_waiters">
            <summary>
            基元用户模式构造同步锁
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Core.SimpleHybirdLock.m_waiterLock">
            <summary>
            基元内核模式构造同步锁
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.SimpleHybirdLock.Enter">
            <summary>
            获取锁
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.SimpleHybirdLock.Leave">
            <summary>
            离开锁
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Core.SimpleHybirdLock.IsWaitting">
            <summary>
            获取当前锁是否在等待当中
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Core.ByteTransformBase">
            <summary>
            数据转换类的基础，提供了一些基础的方法实现.
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.#ctor">
            <summary>
            实例化一个默认的对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.#ctor(HYC.HTPLC.Core.DataFormat)">
            <summary>
            使用指定的数据解析来实例化对象
            </summary>
            <param name="dataFormat">数据规则</param>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransBool(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取出bool结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">位的索引</param>
            <returns>bool对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransBool(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取出bool数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">位的索引</param>
            <param name="length">bool长度</param>
            <returns>bool数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取byte结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>byte对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取byte数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>byte数组对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取short结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>short对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransInt16(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取short数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>short数组对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransUInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ushort结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ushort对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransUInt16(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取ushort数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>ushort数组对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransInt32(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取int结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>int对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取int数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>int数组对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransUInt32(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取uint结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>uint对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransUInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取uint数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>uint数组对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransInt64(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取long结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>long对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransInt64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取long数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>long数组对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransUInt64(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ulong结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ulong对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransUInt64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取ulong数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>ulong数组对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransSingle(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取float结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <returns>float对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransSingle(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取float数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>float数组对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransDouble(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取double结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <returns>double对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransDouble(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取double数组结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>double数组对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransString(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            从缓存中提取string结果，使用指定的编码
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <param name="length">byte数组长度</param>
            <param name="encoding">字符串的编码</param>
            <returns>string对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.Boolean)">
            <summary>
            bool变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.Boolean[])">
            <summary>
            bool数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.Byte)">
            <summary>
            byte变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.Int16)">
            <summary>
            short变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.Int16[])">
            <summary>
            short数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.UInt16)">
            <summary>
            ushort变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.UInt16[])">
            <summary>
            ushort数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.Int32)">
            <summary>
            int变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.Int32[])">
            <summary>
            int数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.UInt32)">
            <summary>
            uint变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.UInt32[])">
            <summary>
            uint数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.Int64)">
            <summary>
            long变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.Int64[])">
            <summary>
            long数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.UInt64)">
            <summary>
            ulong变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.UInt64[])">
            <summary>
            ulong数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.Single)">
            <summary>
            float变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.Single[])">
            <summary>
            float数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.Double)">
            <summary>
            double变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.Double[])">
            <summary>
            double数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.TransByte(System.String,System.Text.Encoding)">
            <summary>
            使用指定的编码字符串转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <param name="encoding">字符串的编码方式</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.ByteTransDataFormat4(System.Byte[],System.Int32)">
            <summary>
            反转多字节的数据信息
            </summary>
            <param name="value">数据字节</param>
            <param name="index">起始索引，默认值为0</param>
            <returns>实际字节信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformBase.ByteTransDataFormat8(System.Byte[],System.Int32)">
            <summary>
            反转多字节的数据信息
            </summary>
            <param name="value">数据字节</param>
            <param name="index">起始索引，默认值为0</param>
            <returns>实际字节信息</returns>
        </member>
        <member name="P:HYC.HTPLC.Core.ByteTransformBase.DataFormat">
            <summary>
            获取或设置数据解析的格式，默认DCBA，也即是无修改，可选ABCD,BADC，CDAB，DCBA格式，对于Modbus协议来说，默认ABCD
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Core.ByteTransformHelper">
            <summary>
            所有数据转换类的静态辅助方法
            Static helper method for all data conversion classes
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformHelper.GetResultFromBytes``1(HYC.HTPLC.OperateResult{System.Byte[]},System.Func{System.Byte[],``0})">
            <summary>
            结果转换操作的基础方法，需要支持类型，及转换的委托
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="result">源</param>
            <param name="translator">实际转换的委托</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ByteTransformHelper.GetResultFromArray``1(HYC.HTPLC.OperateResult{``0[]})">
            <summary>
            结果转换操作的基础方法，需要支持类型，及转换的委托
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="result">源结果</param>
            <returns>转换结果</returns>
        </member>
        <member name="T:HYC.HTPLC.Core.DataFormat">
            <summary>
            应用于多字节数据的解析或是生成格式
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Core.DataFormat.ABCD">
            <summary>
            按照顺序排序
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Core.DataFormat.BADC">
            <summary>
            按照单字反转
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Core.DataFormat.CDAB">
            <summary>
            按照双字反转
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Core.DataFormat.DCBA">
            <summary>
            按照倒序排序
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Core.IByteTransform">
            <summary>
            支持转换器的基础接口
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransBool(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取出bool结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">位的索引</param>
            <returns>bool对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransBool(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取出bool数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">位的索引</param>
            <param name="length">bool长度</param>
            <returns>bool数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取byte结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>byte对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取byte数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns></returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取short结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>short对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransInt16(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取short数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>short数组对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransUInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ushort结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ushort对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransUInt16(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取ushort数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>ushort数组对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransInt32(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取int结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>int对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取int数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>int数组对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransUInt32(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取uint结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>uint对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransUInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取uint数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>uint数组对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransInt64(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取long结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>long对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransInt64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取long数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>long数组对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransUInt64(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ulong结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ulong对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransUInt64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取ulong数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns>ulong数组对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransSingle(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取float结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <returns>float对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransSingle(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取float数组结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns></returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransDouble(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取double结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <returns>double对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransDouble(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从缓存中提取double数组结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <param name="length">读取的数组长度</param>
            <returns></returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransString(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            从缓存中提取string结果，使用指定的编码
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <param name="length">byte数组长度</param>
            <param name="encoding">字符串的编码</param>
            <returns>string对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.Boolean)">
            <summary>
            bool变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.Boolean[])">
            <summary>
            bool数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.Byte)">
            <summary>
            byte变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.Int16)">
            <summary>
            short变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.Int16[])">
            <summary>
            short数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.UInt16)">
            <summary>
            ushort变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.UInt16[])">
            <summary>
            ushort数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.Int32)">
            <summary>
            int变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.Int32[])">
            <summary>
            int数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.UInt32)">
            <summary>
            uint变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.UInt32[])">
            <summary>
            uint数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.Int64)">
            <summary>
            long变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.Int64[])">
            <summary>
            long数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.UInt64)">
            <summary>
            ulong变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.UInt64[])">
            <summary>
            ulong数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.Single)">
            <summary>
            float变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.Single[])">
            <summary>
            float数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.Double)">
            <summary>
            double变量转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.Double[])">
            <summary>
            double数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.IByteTransform.TransByte(System.String,System.Text.Encoding)">
            <summary>
            使用指定的编码字符串转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <param name="encoding">字符串的编码方式</param>
            <returns>buffer数据</returns>
        </member>
        <member name="P:HYC.HTPLC.Core.IByteTransform.DataFormat">
            <summary>
            获取或设置数据解析的格式，默认ABCD，可选BADC，CDAB，DCBA格式
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Core.RegularByteTransform">
            <summary>
            常规的字节转换类
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.RegularByteTransform.#ctor">
            <summary>
            实例化一个默认的对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.RegularByteTransform.#ctor(HYC.HTPLC.Core.DataFormat)">
            <summary>
            使用指定的解析规则来初始化对象
            </summary>
            <param name="dataFormat">解析规则</param>
        </member>
        <member name="T:HYC.HTPLC.Core.ReverseBytesTransform">
            <summary>
            字节倒序的转换类
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseBytesTransform.#ctor">
            <summary>
            实例化一个默认的对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseBytesTransform.#ctor(HYC.HTPLC.Core.DataFormat)">
            <summary>
            使用指定的数据解析来实例化对象
            </summary>
            <param name="dataFormat">数据规则</param>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseBytesTransform.TransInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取short结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>short对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseBytesTransform.TransUInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ushort结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ushort对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseBytesTransform.TransInt32(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取int结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>int对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseBytesTransform.TransUInt32(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取uint结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>uint对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseBytesTransform.TransInt64(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取long结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>long对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseBytesTransform.TransUInt64(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ulong结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ulong对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseBytesTransform.TransSingle(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取float结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <returns>float对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseBytesTransform.TransDouble(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取double结果
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <returns>double对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseBytesTransform.TransByte(System.Int16[])">
            <summary>
            short数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseBytesTransform.TransByte(System.UInt16[])">
            <summary>
            ushort数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseBytesTransform.TransByte(System.Int32[])">
            <summary>
            int数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseBytesTransform.TransByte(System.UInt32[])">
            <summary>
            uint数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseBytesTransform.TransByte(System.Int64[])">
            <summary>
            long数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseBytesTransform.TransByte(System.UInt64[])">
            <summary>
            ulong数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseBytesTransform.TransByte(System.Single[])">
            <summary>
            float数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseBytesTransform.TransByte(System.Double[])">
            <summary>
            double数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="T:HYC.HTPLC.Core.ReverseWordTransform">
            <summary>
            按照字节错位的数据转换类
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseWordTransform.#ctor">
            <summary>
            实例化一个默认的对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseWordTransform.#ctor(HYC.HTPLC.Core.DataFormat)">
            <summary>
            使用指定的数据解析来实例化对象
            </summary>
            <param name="dataFormat">数据规则</param>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseWordTransform.ReverseBytesByWord(System.Byte[],System.Int32,System.Int32)">
            <summary>
            按照字节错位的方法
            </summary>
            <param name="buffer">实际的字节数据</param>
            <param name="index">起始字节位置</param>
            <param name="length">数据长度</param>
            <returns>处理过的数据信息</returns>
        </member>
        <member name="P:HYC.HTPLC.Core.ReverseWordTransform.IsStringReverse">
            <summary>
            字符串数据是否按照字来反转
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseWordTransform.TransInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取short结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>short对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseWordTransform.TransUInt16(System.Byte[],System.Int32)">
            <summary>
            从缓存中提取ushort结果
            </summary>
            <param name="buffer">缓存数据</param>
            <param name="index">索引位置</param>
            <returns>ushort对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseWordTransform.TransString(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            从缓存中提取string结果，使用指定的编码
            </summary>
            <param name="buffer">缓存对象</param>
            <param name="index">索引位置</param>
            <param name="length">byte数组长度</param>
            <param name="encoding">字符串的编码</param>
            <returns>string对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseWordTransform.TransByte(System.Int16[])">
            <summary>
            short数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseWordTransform.TransByte(System.UInt16[])">
            <summary>
            ushort数组变量转化缓存数据
            </summary>
            <param name="values">等待转化的数组</param>
            <returns>buffer数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Core.ReverseWordTransform.TransByte(System.String,System.Text.Encoding)">
            <summary>
            使用指定的编码字符串转化缓存数据
            </summary>
            <param name="value">等待转化的数据</param>
            <param name="encoding">字符串的编码方式</param>
            <returns>buffer数据</returns>
        </member>
        <member name="T:HYC.HTPLC.HycDeviceAddressAttribute">
            <summary>
            应用于组件库读取的动态地址解析
            </summary>
        </member>
        <member name="P:HYC.HTPLC.HycDeviceAddressAttribute.deviceType">
            <summary>
            设备的类似，这将决定是否使用当前的PLC地址
            </summary>
        </member>
        <member name="P:HYC.HTPLC.HycDeviceAddressAttribute.address">
            <summary>
            数据的地址信息
            </summary>
        </member>
        <member name="P:HYC.HTPLC.HycDeviceAddressAttribute.length">
            <summary>
            数据长度
            </summary>
        </member>
        <member name="M:HYC.HTPLC.HycDeviceAddressAttribute.#ctor(System.String)">
            <summary>
            实例化一个地址特性，指定地址信息
            </summary>
            <param name="address">真实的地址信息</param>
        </member>
        <member name="M:HYC.HTPLC.HycDeviceAddressAttribute.#ctor(System.String,System.Type)">
            <summary>
            实例化一个地址特性，指定地址信息
            </summary>
            <param name="address">真实的地址信息</param>
            <param name="deviceType">设备的地址信息</param>
        </member>
        <member name="M:HYC.HTPLC.HycDeviceAddressAttribute.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个地址特性，指定地址信息和数据长度，通常应用于数组的批量读取
            </summary>
            <param name="address">真实的地址信息</param>
            <param name="length">读取的数据长度</param>
        </member>
        <member name="M:HYC.HTPLC.HycDeviceAddressAttribute.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            实例化一个地址特性，指定地址信息和数据长度，通常应用于数组的批量读取
            </summary>
            <param name="address">真实的地址信息</param>
            <param name="length">读取的数据长度</param>
            <param name="deviceType">设备类型</param>
        </member>
        <member name="T:HYC.HTPLC.HycTimeOut">
            <summary>
            超时操作的类 [a class use to indicate the time-out of the connection]
            </summary>
        </member>
        <member name="M:HYC.HTPLC.HycTimeOut.#ctor">
            <summary>
            实例化对象
            </summary>
        </member>
        <member name="P:HYC.HTPLC.HycTimeOut.StartTime">
            <summary>
            操作的开始时间
            </summary>
        </member>
        <member name="P:HYC.HTPLC.HycTimeOut.IsSuccessful">
            <summary>
            操作是否成功
            </summary>
        </member>
        <member name="P:HYC.HTPLC.HycTimeOut.DelayTime">
            <summary>
            延时的时间，单位毫秒
            </summary>
        </member>
        <member name="P:HYC.HTPLC.HycTimeOut.WorkSocket">
            <summary>
            连接超时用的Socket
            </summary>
        </member>
        <member name="P:HYC.HTPLC.HycTimeOut.Operator">
            <summary>
            用于超时执行的方法
            </summary>
        </member>
        <member name="P:HYC.HTPLC.HycTimeOut.HybirdLock">
            <summary>
            当前对象判断的同步锁
            </summary>
        </member>
        <member name="T:HYC.HTPLC.IDataTransfer">
            <summary>
            用于PLC通讯及ModBus自定义数据类型的读写操作
            </summary>
            <remarks>
            主要应用于设备实现设备类的自定义的数据类型读写，以此达到简化代码的操作，但是有一个前提，该数据处于连续的数据区块
            </remarks> 
        </member>
        <member name="P:HYC.HTPLC.IDataTransfer.ReadCount">
            <summary>
            读取的数据长度，对于西门子，等同于字节数，对于三菱和Modbus为字节数的一半
            </summary>
        </member>
        <member name="M:HYC.HTPLC.IDataTransfer.ParseSource(System.Byte[])">
            <summary>
            从字节数组进行解析实际的对象
            </summary>
            <param name="Content">从远程读取的数据源</param>
        </member>
        <member name="M:HYC.HTPLC.IDataTransfer.ToSource">
            <summary>
            将对象生成字符源，写入PLC中
            </summary>
            <returns>准备写入到远程的数据</returns>
        </member>
        <member name="T:HYC.HTPLC.OperateResult">
            <summary>
            操作结果的类，只带有成功标志和错误信息 -> The class that operates the result, with only success flags and error messages
            </summary>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.#ctor">
            <summary>
            实例化一个默认的结果对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.#ctor(System.String)">
            <summary>
            使用指定的消息实例化一个默认的结果对象
            </summary>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.#ctor(System.Int32,System.String)">
            <summary>
            使用错误代码，消息文本来实例化对象
            </summary>
            <param name="err">错误代码</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="P:HYC.HTPLC.OperateResult.IsSuccess">
            <summary>
            指示本次访问是否成功
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult.Message">
            <summary>
            具体的错误描述
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult.ErrorCode">
            <summary>
            具体的错误代码
            </summary>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.ToMessageShowString">
            <summary>
            获取错误代号及文本描述
            </summary>
            <returns>包含错误码及错误消息</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CopyErrorFromOther``1(``0)">
            <summary>
            从另一个结果类中拷贝错误信息
            </summary>
            <typeparam name="TResult">支持结果类及派生类</typeparam>
            <param name="result">结果类及派生类的对象</param>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateFailedResult``1(HYC.HTPLC.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="result">之前的结果对象</param>
            <returns>带默认泛型对象的失败结果类</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateFailedResult``2(HYC.HTPLC.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <param name="result">之前的结果对象</param>
            <returns>带默认泛型对象的失败结果类</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateFailedResult``3(HYC.HTPLC.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <param name="result">之前的结果对象</param>
            <returns>带默认泛型对象的失败结果类</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateFailedResult``4(HYC.HTPLC.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <typeparam name="T4">目标数据类型四</typeparam>
            <param name="result">之前的结果对象</param>
            <returns>带默认泛型对象的失败结果类</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateFailedResult``5(HYC.HTPLC.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <typeparam name="T4">目标数据类型四</typeparam>
            <typeparam name="T5">目标数据类型五</typeparam>
            <param name="result">之前的结果对象</param>
            <returns>带默认泛型对象的失败结果类</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateFailedResult``6(HYC.HTPLC.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <typeparam name="T4">目标数据类型四</typeparam>
            <typeparam name="T5">目标数据类型五</typeparam>
            <typeparam name="T6">目标数据类型六</typeparam>
            <param name="result">之前的结果对象</param>
            <returns>带默认泛型对象的失败结果类</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateFailedResult``7(HYC.HTPLC.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <typeparam name="T4">目标数据类型四</typeparam>
            <typeparam name="T5">目标数据类型五</typeparam>
            <typeparam name="T6">目标数据类型六</typeparam>
            <typeparam name="T7">目标数据类型七</typeparam>
            <param name="result">之前的结果对象</param>
            <returns>带默认泛型对象的失败结果类</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateFailedResult``8(HYC.HTPLC.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <typeparam name="T4">目标数据类型四</typeparam>
            <typeparam name="T5">目标数据类型五</typeparam>
            <typeparam name="T6">目标数据类型六</typeparam>
            <typeparam name="T7">目标数据类型七</typeparam>
            <typeparam name="T8">目标数据类型八</typeparam>
            <param name="result">之前的结果对象</param>
            <returns>带默认泛型对象的失败结果类</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateFailedResult``9(HYC.HTPLC.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <typeparam name="T4">目标数据类型四</typeparam>
            <typeparam name="T5">目标数据类型五</typeparam>
            <typeparam name="T6">目标数据类型六</typeparam>
            <typeparam name="T7">目标数据类型七</typeparam>
            <typeparam name="T8">目标数据类型八</typeparam>
            <typeparam name="T9">目标数据类型九</typeparam>
            <param name="result">之前的结果对象</param>
            <returns>带默认泛型对象的失败结果类</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateFailedResult``10(HYC.HTPLC.OperateResult)">
            <summary>
            创建并返回一个失败的结果对象，该对象复制另一个结果对象的错误信息
            </summary>
            <typeparam name="T1">目标数据类型一</typeparam>
            <typeparam name="T2">目标数据类型二</typeparam>
            <typeparam name="T3">目标数据类型三</typeparam>
            <typeparam name="T4">目标数据类型四</typeparam>
            <typeparam name="T5">目标数据类型五</typeparam>
            <typeparam name="T6">目标数据类型六</typeparam>
            <typeparam name="T7">目标数据类型七</typeparam>
            <typeparam name="T8">目标数据类型八</typeparam>
            <typeparam name="T9">目标数据类型九</typeparam>
            <typeparam name="T10">目标数据类型十</typeparam>
            <param name="result">之前的结果对象</param>
            <returns>带默认泛型对象的失败结果类</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateSuccessResult">
            <summary>
            创建并返回一个成功的结果对象
            </summary>
            <returns>成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateSuccessResult``1(``0)">
            <summary>
            创建并返回一个成功的结果对象，并带有一个参数对象
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="value">类型的值对象</param>
            <returns>成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateSuccessResult``2(``0,``1)">
            <summary>
            创建并返回一个成功的结果对象，并带有两个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <returns>成的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateSuccessResult``3(``0,``1,``2)">
            <summary>
            创建并返回一个成功的结果对象，并带有三个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <returns>成的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateSuccessResult``4(``0,``1,``2,``3)">
            <summary>
            创建并返回一个成功的结果对象，并带有四个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <param name="value4">类型四对象</param>
            <returns>成的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateSuccessResult``5(``0,``1,``2,``3,``4)">
            <summary>
            创建并返回一个成功的结果对象，并带有五个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <typeparam name="T5">第五个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <param name="value4">类型四对象</param>
            <param name="value5">类型五对象</param>
            <returns>成的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateSuccessResult``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            创建并返回一个成功的结果对象，并带有六个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <typeparam name="T5">第五个参数类型</typeparam>
            <typeparam name="T6">第六个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <param name="value4">类型四对象</param>
            <param name="value5">类型五对象</param>
            <param name="value6">类型六对象</param>
            <returns>成的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateSuccessResult``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            创建并返回一个成功的结果对象，并带有七个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <typeparam name="T5">第五个参数类型</typeparam>
            <typeparam name="T6">第六个参数类型</typeparam>
            <typeparam name="T7">第七个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <param name="value4">类型四对象</param>
            <param name="value5">类型五对象</param>
            <param name="value6">类型六对象</param>
            <param name="value7">类型七对象</param>
            <returns>成的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateSuccessResult``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            创建并返回一个成功的结果对象，并带有八个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <typeparam name="T5">第五个参数类型</typeparam>
            <typeparam name="T6">第六个参数类型</typeparam>
            <typeparam name="T7">第七个参数类型</typeparam>
            <typeparam name="T8">第八个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <param name="value4">类型四对象</param>
            <param name="value5">类型五对象</param>
            <param name="value6">类型六对象</param>
            <param name="value7">类型七对象</param>
            <param name="value8">类型八对象</param>
            <returns>成的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateSuccessResult``9(``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            创建并返回一个成功的结果对象，并带有九个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <typeparam name="T5">第五个参数类型</typeparam>
            <typeparam name="T6">第六个参数类型</typeparam>
            <typeparam name="T7">第七个参数类型</typeparam>
            <typeparam name="T8">第八个参数类型</typeparam>
            <typeparam name="T9">第九个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <param name="value4">类型四对象</param>
            <param name="value5">类型五对象</param>
            <param name="value6">类型六对象</param>
            <param name="value7">类型七对象</param>
            <param name="value8">类型八对象</param>
            <param name="value9">类型九对象</param>
            <returns>成的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.OperateResult.CreateSuccessResult``10(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            创建并返回一个成功的结果对象，并带有十个参数对象
            </summary>
            <typeparam name="T1">第一个参数类型</typeparam>
            <typeparam name="T2">第二个参数类型</typeparam>
            <typeparam name="T3">第三个参数类型</typeparam>
            <typeparam name="T4">第四个参数类型</typeparam>
            <typeparam name="T5">第五个参数类型</typeparam>
            <typeparam name="T6">第六个参数类型</typeparam>
            <typeparam name="T7">第七个参数类型</typeparam>
            <typeparam name="T8">第八个参数类型</typeparam>
            <typeparam name="T9">第九个参数类型</typeparam>
            <typeparam name="T10">第十个参数类型</typeparam>
            <param name="value1">类型一对象</param>
            <param name="value2">类型二对象</param>
            <param name="value3">类型三对象</param>
            <param name="value4">类型四对象</param>
            <param name="value5">类型五对象</param>
            <param name="value6">类型六对象</param>
            <param name="value7">类型七对象</param>
            <param name="value8">类型八对象</param>
            <param name="value9">类型九对象</param>
            <param name="value10">类型十对象</param>
            <returns>成的结果对象</returns>
        </member>
        <member name="T:HYC.HTPLC.OperateResult`1">
            <summary>
            操作结果的泛型类，允许带一个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T">泛型类</typeparam>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`1.#ctor">
            <summary>
            实例化一个默认的结果对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`1.#ctor(System.String)">
            <summary>
            使用指定的消息实例化一个默认的结果对象
            </summary>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`1.#ctor(System.Int32,System.String)">
            <summary>
            使用错误代码，消息文本来实例化对象
            </summary>
            <param name="err">错误代码</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`1.Content">
            <summary>
            用户自定义的泛型数据
            </summary>
        </member>
        <member name="T:HYC.HTPLC.OperateResult`2">
            <summary>
            操作结果的泛型类，允许带两个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`2.#ctor">
            <summary>
            实例化一个默认的结果对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`2.#ctor(System.String)">
            <summary>
            使用指定的消息实例化一个默认的结果对象
            </summary>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`2.#ctor(System.Int32,System.String)">
            <summary>
            使用错误代码，消息文本来实例化对象
            </summary>
            <param name="err">错误代码</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`2.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`2.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="T:HYC.HTPLC.OperateResult`3">
            <summary>
            操作结果的泛型类，允许带三个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`3.#ctor">
            <summary>
            实例化一个默认的结果对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`3.#ctor(System.String)">
            <summary>
            使用指定的消息实例化一个默认的结果对象
            </summary>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`3.#ctor(System.Int32,System.String)">
            <summary>
            使用错误代码，消息文本来实例化对象
            </summary>
            <param name="err">错误代码</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`3.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`3.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`3.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="T:HYC.HTPLC.OperateResult`4">
            <summary>
            操作结果的泛型类，允许带四个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`4.#ctor">
            <summary>
            实例化一个默认的结果对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`4.#ctor(System.String)">
            <summary>
            使用指定的消息实例化一个默认的结果对象
            </summary>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`4.#ctor(System.Int32,System.String)">
            <summary>
            使用错误代码，消息文本来实例化对象
            </summary>
            <param name="err">错误代码</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`4.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`4.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`4.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`4.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="T:HYC.HTPLC.OperateResult`5">
            <summary>
            操作结果的泛型类，允许带五个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`5.#ctor">
            <summary>
            实例化一个默认的结果对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`5.#ctor(System.String)">
            <summary>
            使用指定的消息实例化一个默认的结果对象
            </summary>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`5.#ctor(System.Int32,System.String)">
            <summary>
            使用错误代码，消息文本来实例化对象
            </summary>
            <param name="err">错误代码</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`5.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`5.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`5.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`5.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`5.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="T:HYC.HTPLC.OperateResult`6">
            <summary>
            操作结果的泛型类，允许带六个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
            <typeparam name="T6">泛型类</typeparam>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`6.#ctor">
            <summary>
            实例化一个默认的结果对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`6.#ctor(System.String)">
            <summary>
            使用指定的消息实例化一个默认的结果对象
            </summary>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`6.#ctor(System.Int32,System.String)">
            <summary>
            使用错误代码，消息文本来实例化对象
            </summary>
            <param name="err">错误代码</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`6.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`6.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`6.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`6.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`6.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`6.Content6">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="T:HYC.HTPLC.OperateResult`7">
            <summary>
            操作结果的泛型类，允许带七个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
            <typeparam name="T6">泛型类</typeparam>
            <typeparam name="T7">泛型类</typeparam>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`7.#ctor">
            <summary>
            实例化一个默认的结果对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`7.#ctor(System.String)">
            <summary>
            使用指定的消息实例化一个默认的结果对象
            </summary>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`7.#ctor(System.Int32,System.String)">
            <summary>
            使用错误代码，消息文本来实例化对象
            </summary>
            <param name="err">错误代码</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`7.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`7.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`7.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`7.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`7.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`7.Content6">
            <summary>
            用户自定义的泛型数据6
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`7.Content7">
            <summary>
            用户自定义的泛型数据7
            </summary>
        </member>
        <member name="T:HYC.HTPLC.OperateResult`8">
            <summary>
            操作结果的泛型类，允许带八个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
            <typeparam name="T6">泛型类</typeparam>
            <typeparam name="T7">泛型类</typeparam>
            <typeparam name="T8">泛型类</typeparam>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`8.#ctor">
            <summary>
            实例化一个默认的结果对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`8.#ctor(System.String)">
            <summary>
            使用指定的消息实例化一个默认的结果对象
            </summary>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`8.#ctor(System.Int32,System.String)">
            <summary>
            使用错误代码，消息文本来实例化对象
            </summary>
            <param name="err">错误代码</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`8.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`8.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`8.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`8.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`8.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`8.Content6">
            <summary>
            用户自定义的泛型数据6
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`8.Content7">
            <summary>
            用户自定义的泛型数据7
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`8.Content8">
            <summary>
            用户自定义的泛型数据8
            </summary>
        </member>
        <member name="T:HYC.HTPLC.OperateResult`9">
            <summary>
            操作结果的泛型类，允许带九个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
            <typeparam name="T6">泛型类</typeparam>
            <typeparam name="T7">泛型类</typeparam>
            <typeparam name="T8">泛型类</typeparam>
            <typeparam name="T9">泛型类</typeparam>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`9.#ctor">
            <summary>
            实例化一个默认的结果对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`9.#ctor(System.String)">
            <summary>
            使用指定的消息实例化一个默认的结果对象
            </summary>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`9.#ctor(System.Int32,System.String)">
            <summary>
            使用错误代码，消息文本来实例化对象
            </summary>
            <param name="err">错误代码</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`9.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`9.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`9.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`9.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`9.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`9.Content6">
            <summary>
            用户自定义的泛型数据6
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`9.Content7">
            <summary>
            用户自定义的泛型数据7
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`9.Content8">
            <summary>
            用户自定义的泛型数据8
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`9.Content9">
            <summary>
            用户自定义的泛型数据9
            </summary>
        </member>
        <member name="T:HYC.HTPLC.OperateResult`10">
            <summary>
            操作结果的泛型类，允许带十个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
            <typeparam name="T6">泛型类</typeparam>
            <typeparam name="T7">泛型类</typeparam>
            <typeparam name="T8">泛型类</typeparam>
            <typeparam name="T9">泛型类</typeparam>
            <typeparam name="T10">泛型类</typeparam>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`10.#ctor">
            <summary>
            实例化一个默认的结果对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`10.#ctor(System.String)">
            <summary>
            使用指定的消息实例化一个默认的结果对象
            </summary>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:HYC.HTPLC.OperateResult`10.#ctor(System.Int32,System.String)">
            <summary>
            使用错误代码，消息文本来实例化对象
            </summary>
            <param name="err">错误代码</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`10.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`10.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`10.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`10.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`10.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`10.Content6">
            <summary>
            用户自定义的泛型数据6
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`10.Content7">
            <summary>
            用户自定义的泛型数据7
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`10.Content8">
            <summary>
            用户自定义的泛型数据8
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`10.Content9">
            <summary>
            用户自定义的泛型数据9
            </summary>
        </member>
        <member name="P:HYC.HTPLC.OperateResult`10.Content10">
            <summary>
            用户自定义的泛型数据10
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Language.DefaultLanguage">
            <summary>
            系统的语言基类，默认也即是中文版本
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Language.English">
            <summary>
            English Version Text
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Profinet.Melsec.MelsecA1EDataType">
            <summary>
            三菱PLC的数据类型，此处包含了几个常用的类型
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA1EDataType.#ctor(System.Byte[],System.Byte,System.String,System.Int32)">
            <summary>
            如果您清楚类型代号，可以根据值进行扩展
            </summary>
            <param name="code">数据类型的代号</param>
            <param name="type">0或1，默认为0</param>
            <param name="asciiCode">ASCII格式的类型信息</param>
            <param name="fromBase">指示地址的多少进制的，10或是16</param>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Melsec.MelsecA1EDataType.DataCode">
            <summary>
            类型的代号值（软元件代码，用于区分软元件类型，如：D，R）
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Melsec.MelsecA1EDataType.DataType">
            <summary>
            数据的类型，0代表按字，1代表按位
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Melsec.MelsecA1EDataType.AsciiCode">
            <summary>
            当以ASCII格式通讯时的类型描述
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Melsec.MelsecA1EDataType.FromBase">
            <summary>
            指示地址是10进制，还是16进制的
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecA1EDataType.X">
            <summary>
            X输入寄存器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecA1EDataType.Y">
            <summary>
            Y输出寄存器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecA1EDataType.M">
            <summary>
            M中间寄存器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecA1EDataType.S">
            <summary>
            S状态寄存器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecA1EDataType.D">
            <summary>
            D数据寄存器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecA1EDataType.R">
            <summary>
            R文件寄存器
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Profinet.Melsec.MelsecA1ENet">
            <summary>
            三菱PLC通讯协议，采用A兼容1E帧协议实现，使用二进制码通讯，请根据实际型号来进行选取
            </summary>
            <remarks>
            本类适用于的PLC列表
            <list type="number">
            <item>FX3U(C) PLC   测试人sandy_liao</item>
            </list>
            数据地址支持的格式如下：
            <list type="table">
              <listheader>
                <term>地址名称</term>
                <term>地址代号</term>
                <term>示例</term>
                <term>地址进制</term>
                <term>字操作</term>
                <term>位操作</term>
                <term>备注</term>
              </listheader>
              <item>
                <term>内部继电器</term>
                <term>M</term>
                <term>M100,M200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>输入继电器</term>
                <term>X</term>
                <term>X10,X20</term>
                <term>8</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>输出继电器</term>
                <term>Y</term>
                <term>Y10,Y20</term>
                <term>8</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>步进继电器</term>
                <term>S</term>
                <term>S100,S200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>数据寄存器</term>
                <term>D</term>
                <term>D1000,D2000</term>
                <term>10</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
              <item>
                <term>文件寄存器</term>
                <term>R</term>
                <term>R100,R200</term>
                <term>10</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
            </list>
            <note type="important">本通讯类由CKernal推送，感谢</note>
            </remarks>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA1ENet.#ctor">
            <summary>
            实例化三菱的A兼容1E帧协议的通讯对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA1ENet.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个三菱的A兼容1E帧协议的通讯对象
            </summary>
            <param name="ipAddress">PLC的Ip地址</param>
            <param name="port">PLC的端口</param>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Melsec.MelsecA1ENet.PLCNumber">
            <summary>
            PLC编号
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA1ENet.Read(System.String,System.UInt16)">
            <summary>
            从三菱PLC中读取想要的数据，返回读取结果
            </summary>
            <param name="address">读取地址，格式为"M100","D100","W1A0"</param>
            <param name="length">读取的数据长度，字最大值960，位最大值7168</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA1ENet.ReadBool(System.String,System.UInt16)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA1ENet.Write(System.String,System.Boolean[])">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据，可以指定任意的长度</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA1ENet.ToString">
            <summary
            返回表示当前对象的字符串
            </summary>
            <returns>字符串信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA1ENet.BuildReadCommand(System.String,System.UInt16,System.Boolean,System.Byte)">
            <summary>
            根据类型地址长度确认需要读取的指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="length">长度</param>
            <param name="isBit">指示是否按照位成批的读出</param>
            <param name="plcNumber">PLC编号</param>
            <returns>带有成功标志的指令数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA1ENet.BuildWriteCommand(System.String,System.Byte[],System.Byte)">
            <summary>
            根据类型地址以及需要写入的数据来生成指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="value">数据值</param>
            <param name="plcNumber">PLC编号</param>
            <returns>带有成功标志的指令数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA1ENet.ExtractActualData(System.Byte[],System.Boolean)">
            <summary>
            从PLC反馈的数据中提取出实际的数据内容，需要传入反馈数据，是否位读取
            </summary>
            <param name="response">反馈的数据内容</param>
            <param name="isBit">是否位读取</param>
            <returns>解析后的结果对象</returns>
        </member>
        <member name="T:HYC.HTPLC.Profinet.Melsec.MelsecA3CNet1">
            <summary>
            基于Qna 兼容3C帧的格式一的通讯，具体的地址需要参照三菱的基本地址
            </summary>
            <remarks>
            地址的输入的格式说明如下：
            <list type="table">
              <listheader>
                <term>地址名称</term>
                <term>地址代号</term>
                <term>示例</term>
                <term>地址进制</term>
                <term>字操作</term>
                <term>位操作</term>
                <term>备注</term>
              </listheader>
              <item>
                <term>内部继电器</term>
                <term>M</term>
                <term>M100,M200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>输入继电器</term>
                <term>X</term>
                <term>X100,X1A0</term>
                <term>16</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>输出继电器</term>
                <term>Y</term>
                <term>Y100,Y1A0</term>
                <term>16</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
               <item>
                <term>锁存继电器</term>
                <term>L</term>
                <term>L100,L200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>报警器</term>
                <term>F</term>
                <term>F100,F200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>边沿继电器</term>
                <term>V</term>
                <term>V100,V200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>链接继电器</term>
                <term>B</term>
                <term>B100,B1A0</term>
                <term>16</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>步进继电器</term>
                <term>S</term>
                <term>S100,S200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>数据寄存器</term>
                <term>D</term>
                <term>D1000,D2000</term>
                <term>10</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
              <item>
                <term>链接寄存器</term>
                <term>W</term>
                <term>W100,W1A0</term>
                <term>16</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
              <item>
                <term>文件寄存器</term>
                <term>R</term>
                <term>R100,R200</term>
                <term>10</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
              <item>
                <term>ZR文件寄存器</term>
                <term>ZR</term>
                <term>ZR100,ZR2A0</term>
                <term>16</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
              <item>
                <term>变址寄存器</term>
                <term>Z</term>
                <term>Z100,Z200</term>
                <term>10</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
              <item>
                <term>定时器的触点</term>
                <term>TS</term>
                <term>TS100,TS200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>定时器的线圈</term>
                <term>TC</term>
                <term>TC100,TC200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>定时器的当前值</term>
                <term>TN</term>
                <term>TN100,TN200</term>
                <term>10</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
              <item>
                <term>累计定时器的触点</term>
                <term>SS</term>
                <term>SS100,SS200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>累计定时器的线圈</term>
                <term>SC</term>
                <term>SC100,SC200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>累计定时器的当前值</term>
                <term>SN</term>
                <term>SN100,SN200</term>
                <term>10</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
              <item>
                <term>计数器的触点</term>
                <term>CS</term>
                <term>CS100,CS200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>计数器的线圈</term>
                <term>CC</term>
                <term>CC100,CC200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>计数器的当前值</term>
                <term>CN</term>
                <term>CN100,CN200</term>
                <term>10</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA3CNet1.#ctor">
            <summary>
            实例化默认的构造方法
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Melsec.MelsecA3CNet1.Station">
            <summary>
            PLC的站号信息
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA3CNet1.Read(System.String,System.UInt16)">
            <summary>
            批量读取PLC的数据，以字为单位，支持读取X,Y,M,S,D,T,C，具体的地址范围需要根据PLC型号来确认
            </summary>
            <param name="address">地址信息</param>
            <param name="length">数据长度</param>
            <returns>读取结果信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA3CNet1.Write(System.String,System.Byte[])">
            <summary>
            批量写入PLC的数据，以字为单位，也就是说最少2个字节信息，支持X,Y,M,S,D,T,C，具体的地址范围需要根据PLC型号来确认
            </summary>
            <param name="address">地址信息</param>
            <param name="value">数据值</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA3CNet1.ReadBool(System.String,System.UInt16)">
            <summary>
            批量读取bool类型数据，支持的类型为X,Y,S,T,C，具体的地址范围取决于PLC的类型
            </summary>
            <param name="address">地址信息，比如X10,Y17，注意X，Y的地址是8进制的</param>
            <param name="length">读取的长度</param>
            <returns>读取结果信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA3CNet1.Write(System.String,System.Boolean[])">
            <summary>
            批量写入bool类型的数组，支持的类型为X,Y,S,T,C，具体的地址范围取决于PLC的类型
            </summary>
            <param name="address">PLC的地址信息</param>
            <param name="value">数据信息</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA3CNet1.RemoteRun">
            <summary>
            远程Run操作
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA3CNet1.RemoteStop">
            <summary>
            远程Stop操作
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA3CNet1.ReadPlcType">
            <summary>
            读取PLC的型号信息
            </summary>
            <returns>返回型号的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA3CNet1.ToString">
            <summary>
            返回表示当前对象的字符串
            </summary>
            <returns>字符串信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecA3CNet1.PackCommand(System.Byte[],System.Byte)">
            <summary>
            将命令进行打包传送
            </summary>
            <param name="mcCommand">mc协议的命令</param>
            <param name="station">PLC的站号</param>
            <returns>最终的原始报文信息</returns>
        </member>
        <member name="T:HYC.HTPLC.Profinet.Melsec.MelsecFxLinks">
            <summary>
            三菱PLC的计算机链接协议，适用的PLC型号参考备注
            </summary>
            <remarks>
            支持的通讯的系列如下参考
            <list type="table">
                <listheader>
                    <term>系列</term>
                    <term>是否支持</term>
                    <term>备注</term>
                </listheader>
                <item>
                    <description>FX3UC系列</description>
                    <description>支持</description>
                    <description></description>
                </item>
                <item>
                    <description>FX3U系列</description>
                    <description>支持</description>
                    <description></description>
                </item>
                <item>
                    <description>FX3GC系列</description>
                    <description>支持</description>
                    <description></description>
                </item>
                <item>
                    <description>FX3G系列</description>
                    <description>支持</description>
                    <description></description>
                </item>
                <item>
                    <description>FX3S系列</description>
                    <description>支持</description>
                    <description></description>
                </item>
                <item>
                    <description>FX2NC系列</description>
                    <description>支持</description>
                    <description></description>
                </item>
                <item>
                    <description>FX2N系列</description>
                    <description>部分支持(v1.06+)</description>
                    <description>通过监控D8001来确认版本号</description>
                </item>
                <item>
                    <description>FX1NC系列</description>
                    <description>支持</description>
                    <description></description>
                </item>
                <item>
                    <description>FX1N系列</description>
                    <description>支持</description>
                    <description></description>
                </item>
                <item>
                    <description>FX1S系列</description>
                    <description>支持</description>
                    <description></description>
                </item>
                <item>
                    <description>FX0N系列</description>
                    <description>部分支持(v1.20+)</description>
                    <description></description>
                </item>
                <item>
                    <description>FX0S系列</description>
                    <description>不支持</description>
                    <description></description>
                </item>
                <item>
                    <description>FX0系列</description>
                    <description>不支持</description>
                    <description></description>
                </item>
                <item>
                    <description>FX2C系列</description>
                    <description>部分支持(v3.30+)</description>
                    <description></description>
                </item>
                <item>
                    <description>FX2(FX)系列</description>
                    <description>部分支持(v3.30+)</description>
                    <description></description>
                </item>
                <item>
                    <description>FX1系列</description>
                    <description>不支持</description>
                    <description></description>
                </item>
            </list>
            数据地址支持的格式如下：
            <list type="table">
              <listheader>
                <term>地址名称</term>
                <term>地址代号</term>
                <term>示例</term>
                <term>地址进制</term>
                <term>字操作</term>
                <term>位操作</term>
                <term>备注</term>
              </listheader>
              <item>
                <term>内部继电器</term>
                <term>M</term>
                <term>M100,M200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>输入继电器</term>
                <term>X</term>
                <term>X10,X20</term>
                <term>8</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>输出继电器</term>
                <term>Y</term>
                <term>Y10,Y20</term>
                <term>8</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>步进继电器</term>
                <term>S</term>
                <term>S100,S200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>定时器的触点</term>
                <term>TS</term>
                <term>TS100,TS200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>定时器的当前值</term>
                <term>TN</term>
                <term>TN100,TN200</term>
                <term>10</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
              <item>
                <term>计数器的触点</term>
                <term>CS</term>
                <term>CS100,CS200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>计数器的当前</term>
                <term>CN</term>
                <term>CN100,CN200</term>
                <term>10</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
              <item>
                <term>数据寄存器</term>
                <term>D</term>
                <term>D1000,D2000</term>
                <term>10</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
              <item>
                <term>文件寄存器</term>
                <term>R</term>
                <term>R100,R200</term>
                <term>10</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxLinks.#ctor">
            <summary>
            实例化默认的构造方法
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Melsec.MelsecFxLinks.Station">
            <summary>
            PLC的站号信息
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Melsec.MelsecFxLinks.WaittingTime">
            <summary>
            报文等待时间，单位10ms，设置范围为0-15
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Melsec.MelsecFxLinks.SumCheck">
            <summary>
            是否启动和校验
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxLinks.Read(System.String,System.UInt16)">
            <summary>
            批量读取PLC的数据，以字为单位，支持读取X,Y,M,S,D,T,C，具体的地址范围需要根据PLC型号来确认
            </summary>
            <param name="address">地址信息</param>
            <param name="length">数据长度</param>
            <returns>读取结果信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxLinks.Write(System.String,System.Byte[])">
            <summary>
            批量写入PLC的数据，以字为单位，也就是说最少2个字节信息，支持X,Y,M,S,D,T,C，具体的地址范围需要根据PLC型号来确认
            </summary>
            <param name="address">地址信息</param>
            <param name="value">数据值</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxLinks.ReadBool(System.String,System.UInt16)">
            <summary>
            批量读取bool类型数据，支持的类型为X,Y,S,T,C，具体的地址范围取决于PLC的类型
            </summary>
            <param name="address">地址信息，比如X10,Y17，注意X，Y的地址是8进制的</param>
            <param name="length">读取的长度</param>
            <returns>读取结果信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxLinks.Write(System.String,System.Boolean[])">
            <summary>
            批量写入bool类型的数组，支持的类型为X,Y,S,T,C，具体的地址范围取决于PLC的类型
            </summary>
            <param name="address">PLC的地址信息</param>
            <param name="value">数据信息</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxLinks.StartPLC">
            <summary>
            启动PLC
            </summary>
            <returns>是否启动成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxLinks.StopPLC">
            <summary>
            停止PLC
            </summary>
            <returns>是否停止成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxLinks.FxAnalysisAddress(System.String)">
            <summary>
            解析数据地址成不同的三菱地址类型
            </summary>
            <param name="address">数据地址</param>
            <returns>地址结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxLinks.CalculateAcc(System.String)">
            <summary>
            计算指令的和校验码
            </summary>
            <param name="data">指令</param>
            <returns>校验之后的信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxLinks.BuildReadCommand(System.Byte,System.String,System.UInt16,System.Boolean,System.Boolean,System.Byte)">
            <summary>
            创建一条读取的指令信息，需要指定一些参数
            </summary>
            <param name="station">PLCd的站号</param>
            <param name="address">地址信息</param>
            <param name="length">数据长度</param>
            <param name="isBool">是否位读取</param>
            <param name="sumCheck">是否和校验</param>
            <param name="waitTime">等待时间</param>
            <returns>是否成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxLinks.BuildWriteBoolCommand(System.Byte,System.String,System.Boolean[],System.Boolean,System.Byte)">
            <summary>
            创建一条别入bool数据的指令信息，需要指定一些参数
            </summary>
            <param name="station">站号</param>
            <param name="address">地址</param>
            <param name="value">数组值</param>
            <param name="sumCheck">是否和校验</param>
            <param name="waitTime">等待时间</param>
            <returns>是否创建成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxLinks.BuildWriteByteCommand(System.Byte,System.String,System.Byte[],System.Boolean,System.Byte)">
            <summary>
            创建一条别入byte数据的指令信息，需要指定一些参数，按照字单位
            </summary>
            <param name="station">站号</param>
            <param name="address">地址</param>
            <param name="value">数组值</param>
            <param name="sumCheck">是否和校验</param>
            <param name="waitTime">等待时间</param>
            <returns>是否创建成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxLinks.BuildStart(System.Byte,System.Boolean,System.Byte)">
            <summary>
            创建启动PLC的报文信息
            </summary>
            <param name="station">站号信息</param>
            <param name="sumCheck">是否和校验</param>
            <param name="waitTime">等待时间</param>
            <returns>是否创建成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxLinks.BuildStop(System.Byte,System.Boolean,System.Byte)">
            <summary>
            创建启动PLC的报文信息
            </summary>
            <param name="station">站号信息</param>
            <param name="sumCheck">是否和校验</param>
            <param name="waitTime">等待时间</param>
            <returns>是否创建成功</returns>
        </member>
        <member name="T:HYC.HTPLC.Profinet.Melsec.MelsecHelper">
            <summary>
            所有三菱通讯类的通用辅助工具类，包含了一些通用的静态方法，可以使用本类来获取一些原始的报文信息。详细的操作参见例子
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecHelper.McA1EAnalysisAddress(System.String)">
            <summary>
            解析A1E协议数据地址
            </summary>
            <param name="address">数据地址</param>
            <returns></returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecHelper.BuildReadMcCoreCommand(HYC.HTPLC.Core.Address.McAddressData,System.Boolean)">
            <summary>
            从三菱地址，是否位读取进行创建读取的MC的核心报文
            </summary>
            <param name="isBit">是否进行了位读取操作</param>
            <param name="addressData">三菱Mc协议的数据地址</param>
            <returns>带有成功标识的报文对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecHelper.BuildAsciiReadMcCoreCommand(HYC.HTPLC.Core.Address.McAddressData,System.Boolean)">
            <summary>
            从三菱地址，是否位读取进行创建读取Ascii格式的MC的核心报文
            </summary>
            <param name="addressData">三菱Mc协议的数据地址</param>
            <param name="isBit">是否进行了位读取操作</param>
            <returns>带有成功标识的报文对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecHelper.BuildWriteWordCoreCommand(HYC.HTPLC.Core.Address.McAddressData,System.Byte[])">
            <summary>
            以字为单位，创建数据写入的核心报文
            </summary>
            <param name="addressData">三菱Mc协议的数据地址</param>
            <param name="value">实际的原始数据信息</param>
            <returns>带有成功标识的报文对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecHelper.BuildAsciiWriteWordCoreCommand(HYC.HTPLC.Core.Address.McAddressData,System.Byte[])">
            <summary>
            以字为单位，创建ASCII数据写入的核心报文
            </summary>
            <param name="addressData">三菱Mc协议的数据地址</param>
            <param name="value">实际的原始数据信息</param>
            <returns>带有成功标识的报文对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecHelper.BuildWriteBitCoreCommand(HYC.HTPLC.Core.Address.McAddressData,System.Boolean[])">
            <summary>
            以位为单位，创建数据写入的核心报文
            </summary>
            <param name="addressData">三菱Mc协议的数据地址</param>
            <param name="value">原始的bool数组数据</param>
            <returns>带有成功标识的报文对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecHelper.BuildAsciiWriteBitCoreCommand(HYC.HTPLC.Core.Address.McAddressData,System.Boolean[])">
            <summary>
            以位为单位，创建ASCII数据写入的核心报文
            </summary>
            <param name="addressData">三菱Mc协议的数据地址</param>
            <param name="value">原始的bool数组数据</param>
            <returns>带有成功标识的报文对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecHelper.BuildBytesFromAddress(System.Int32,HYC.HTPLC.Profinet.Melsec.MelsecMcDataType)">
            <summary>
            从三菱的地址中构建MC协议的6字节的ASCII格式的地址
            </summary>
            <param name="address">三菱地址</param>
            <param name="type">三菱的数据类型</param>
            <returns>6字节的ASCII格式的地址</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecHelper.TransBoolArrayToByteData(System.Byte[])">
            <summary>
            将0，1，0，1的字节数组压缩成三菱格式的字节数组来表示开关量的
            </summary>
            <param name="value">原始的数据字节</param>
            <returns>压缩过后的数据字节</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecHelper.TransBoolArrayToByteData(System.Boolean[])">
            <summary>
            将bool的组压缩成三菱格式的字节数组来表示开关量的
            </summary>
            <param name="value">原始的数据字节</param>
            <returns>压缩过后的数据字节</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecHelper.FxCalculateCRC(System.Byte[])">
            <summary>
            计算Fx协议指令的和校验信息
            </summary>
            <param name="data">字节数据</param>
            <returns>校验之后的数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecHelper.CheckCRC(System.Byte[])">
            <summary>
            检查指定的和校验是否是正确的
            </summary>
            <param name="data">字节数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:HYC.HTPLC.Profinet.Melsec.MelsecMcAsciiNet">
            <summary>
            三菱PLC通讯类，采用Qna兼容3E帧协议实现，需要在PLC侧先的以太网模块先进行配置，必须为ASCII通讯格式
            </summary>
            <remarks>
            地址的输入的格式说明如下：
            <list type="table">
              <listheader>
                <term>地址名称</term>
                <term>地址代号</term>
                <term>示例</term>
                <term>地址进制</term>
                <term>字操作</term>
                <term>位操作</term>
                <term>备注</term>
              </listheader>
              <item>
                <term>内部继电器</term>
                <term>M</term>
                <term>M100,M200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>输入继电器</term>
                <term>X</term>
                <term>X100,X1A0</term>
                <term>16</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>输出继电器</term>
                <term>Y</term>
                <term>Y100,Y1A0</term>
                <term>16</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
               <item>
                <term>锁存继电器</term>
                <term>L</term>
                <term>L100,L200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>报警器</term>
                <term>F</term>
                <term>F100,F200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>边沿继电器</term>
                <term>V</term>
                <term>V100,V200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>链接继电器</term>
                <term>B</term>
                <term>B100,B1A0</term>
                <term>16</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>步进继电器</term>
                <term>S</term>
                <term>S100,S200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>数据寄存器</term>
                <term>D</term>
                <term>D1000,D2000</term>
                <term>10</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
              <item>
                <term>链接寄存器</term>
                <term>W</term>
                <term>W100,W1A0</term>
                <term>16</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
              <item>
                <term>文件寄存器</term>
                <term>R</term>
                <term>R100,R200</term>
                <term>10</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
              <item>
                <term>ZR文件寄存器</term>
                <term>ZR</term>
                <term>ZR100,ZR2A0</term>
                <term>16</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
              <item>
                <term>变址寄存器</term>
                <term>Z</term>
                <term>Z100,Z200</term>
                <term>10</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
              <item>
                <term>定时器的触点</term>
                <term>TS</term>
                <term>TS100,TS200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>定时器的线圈</term>
                <term>TC</term>
                <term>TC100,TC200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>定时器的当前值</term>
                <term>TN</term>
                <term>TN100,TN200</term>
                <term>10</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
              <item>
                <term>累计定时器的触点</term>
                <term>SS</term>
                <term>SS100,SS200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>累计定时器的线圈</term>
                <term>SC</term>
                <term>SC100,SC200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>累计定时器的当前值</term>
                <term>SN</term>
                <term>SN100,SN200</term>
                <term>10</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
              <item>
                <term>计数器的触点</term>
                <term>CS</term>
                <term>CS100,CS200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>计数器的线圈</term>
                <term>CC</term>
                <term>CC100,CC200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>计数器的当前值</term>
                <term>CN</term>
                <term>CN100,CN200</term>
                <term>10</term>
                <term>√</term>
                <term>×</term>
                <term></term>
              </item>
            </list>
            </remarks>
            <example>
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\MelsecAscii.cs" region="Usage" title="简单的短连接使用" />
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\MelsecAscii.cs" region="Usage2" title="简单的长连接使用" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcAsciiNet.#ctor">
            <summary>
            实例化三菱的Qna兼容3E帧协议的通讯对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcAsciiNet.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个三菱的Qna兼容3E帧协议的通讯对象
            </summary>
            <param name="ipAddress">PLC的Ip地址</param>
            <param name="port">PLC的端口</param>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Melsec.MelsecMcAsciiNet.NetworkNumber">
            <summary>
            网络号
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Melsec.MelsecMcAsciiNet.NetworkStationNumber">
            <summary>
            网络站号
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcAsciiNet.McAnalysisAddress(System.String,System.UInt16)">
            <summary>
            分析地址的方法，允许派生类里进行重写操作
            </summary>
            <param name="address">地址信息</param>
            <param name="length">数据长度</param>
            <returns>解析后的数据信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcAsciiNet.Read(System.String,System.UInt16)">
            <summary>
            从三菱PLC中读取想要的数据，返回读取结果，读取的单位为字
            </summary>
            <param name="address">读取地址，格式为"M100","D100","W1A0"</param>
            <param name="length">读取的数据长度，字最大值960，位最大值7168</param>
            <returns>带成功标志的结果数据对象</returns>
            <remarks>
            地址支持的列表参考 <seealso cref="T:HYC.HTPLC.Profinet.Melsec.MelsecMcAsciiNet"/> 的备注说明
            </remarks>
            <example>
            假设起始地址为D100，D100存储了温度，100.6℃值为1006，D101存储了压力，1.23Mpa值为123，D102，D103存储了产量计数，读取如下：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\MelsecAscii.cs" region="ReadExample2" title="Read示例" />
            以下是读取不同类型数据的示例
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\MelsecAscii.cs" region="ReadExample1" title="Read示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <example>
            假设起始地址为D100，D100存储了温度，100.6℃值为1006，D101存储了压力，1.23Mpa值为123，D102，D103存储了产量计数，写入如下：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\MelsecAscii.cs" region="WriteExample2" title="Write示例" />
            以下是读取不同类型数据的示例
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\MelsecAscii.cs" region="WriteExample1" title="Write示例" />
            </example>
            <returns>结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcAsciiNet.ReadBool(System.String,System.UInt16)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <remarks>
            地址支持的列表参考 <seealso cref="T:HYC.HTPLC.Profinet.Melsec.MelsecMcAsciiNet"/> 的备注说明
            </remarks>
            <example>
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\MelsecAscii.cs" region="ReadBool" title="Bool类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcAsciiNet.Write(System.String,System.Boolean[])">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据，可以指定任意的长度</param>
            <example>
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\MelsecAscii.cs" region="WriteBool" title="Write示例" />
            </example>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcAsciiNet.RemoteRun">
            <summary>
            远程Run操作
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcAsciiNet.RemoteStop">
            <summary>
            远程Stop操作
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcAsciiNet.ReadPlcType">
            <summary>
            读取PLC的型号信息
            </summary>
            <returns>返回型号的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcAsciiNet.ToString">
            <summary>
            获取当前对象的字符串标识形式
            </summary>
            <returns>字符串信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcAsciiNet.PackMcCommand(System.Byte[],System.Byte,System.Byte)">
            <summary>
            将MC协议的核心报文打包成一个可以直接对PLC进行发送的原始报文
            </summary>
            <param name="mcCore">MC协议的核心报文</param>
            <param name="networkNumber">网络号</param>
            <param name="networkStationNumber">网络站号</param>
            <returns>原始报文信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcAsciiNet.ExtractActualData(System.Byte[],System.Boolean)">
            <summary>
            从PLC反馈的数据中提取出实际的数据内容，需要传入反馈数据，是否位读取
            </summary>
            <param name="response">反馈的数据内容</param>
            <param name="isBit">是否位读取</param>
            <returns>解析后的结果对象</returns>
        </member>
        <member name="T:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType">
            <summary>
            三菱PLC的数据类型，此处包含了几个常用的类型
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.#ctor(System.Byte,System.Byte,System.String,System.Int32)">
            <summary>
            如果您清楚类型代号，可以根据值进行扩展
            </summary>
            <param name="code">数据类型的代号</param>
            <param name="type">0或1，默认为0</param>
            <param name="asciiCode">ASCII格式的类型信息</param>
            <param name="fromBase">指示地址的多少进制的，10或是16</param>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.DataCode">
            <summary>
            类型的代号值
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.DataType">
            <summary>
            数据的类型，0代表按字，1代表按位
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.AsciiCode">
            <summary>
            当以ASCII格式通讯时的类型描述
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.FromBase">
            <summary>
            指示地址是10进制，还是16进制的
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.X">
            <summary>
            X输入继电器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Y">
            <summary>
            Y输出继电器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.M">
            <summary>
            M中间继电器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.D">
            <summary>
            D数据寄存器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.W">
            <summary>
            W链接寄存器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.L">
            <summary>
            L锁存继电器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.F">
            <summary>
            F报警器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.V">
            <summary>
            V边沿继电器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.B">
            <summary>
            B链接继电器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.R">
            <summary>
            R文件寄存器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.S">
            <summary>
            S步进继电器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Z">
            <summary>
            变址寄存器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.TN">
            <summary>
            定时器的当前值
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.TS">
            <summary>
            定时器的触点
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.TC">
            <summary>
            定时器的线圈
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.SS">
            <summary>
            累计定时器的触点
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.SC">
            <summary>
            累计定时器的线圈
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.SN">
            <summary>
            累计定时器的当前值
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.CN">
            <summary>
            计数器的当前值
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.CS">
            <summary>
            计数器的触点
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.CC">
            <summary>
            计数器的线圈
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.ZR">
            <summary>
            文件寄存器ZR区
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Keyence_X">
            <summary>
            X输入继电器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Keyence_Y">
            <summary>
            Y输出继电器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Keyence_B">
            <summary>
            链接继电器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Keyence_M">
            <summary>
            内部辅助继电器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Keyence_L">
            <summary>
            锁存继电器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Keyence_SM">
            <summary>
            控制继电器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Keyence_SD">
            <summary>
            控制存储器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Keyence_D">
            <summary>
            数据存储器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Keyence_R">
            <summary>
            文件寄存器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Keyence_ZR">
            <summary>
            文件寄存器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Keyence_W">
            <summary>
            链路寄存器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Keyence_TN">
            <summary>
            计时器（当前值）
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Keyence_TS">
            <summary>
            计时器（接点）
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Keyence_CN">
            <summary>
            计数器（当前值）
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Keyence_CS">
            <summary>
            计数器（接点）
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Panasonic_X">
            <summary>
            输入继电器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Panasonic_Y">
            <summary>
            输出继电器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Panasonic_L">
            <summary>
            链接继电器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Panasonic_R">
            <summary>
            内部继电器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Panasonic_DT">
            <summary>
            数据存储器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Panasonic_LD">
            <summary>
            链接存储器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Panasonic_TN">
            <summary>
            计时器（当前值）
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Panasonic_TS">
            <summary>
            计时器（接点）
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Panasonic_CN">
            <summary>
            计数器（当前值）
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Panasonic_CS">
            <summary>
            计数器（接点）
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Panasonic_SM">
            <summary>
            特殊链接继电器
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Melsec.MelsecMcDataType.Panasonic_SD">
            <summary>
            特殊链接存储器
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Profinet.Melsec.MelsecMcNet">
            <summary>
            三菱PLC通讯类，采用Qna兼容3E帧协议实现，需要在PLC侧先的以太网模块先进行配置，必须为二进制通讯
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcNet.#ctor">
            <summary>
            实例化三菱的Qna兼容3E帧协议的通讯对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcNet.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个三菱的Qna兼容3E帧协议的通讯对象
            </summary>
            <param name="ipAddress">PLC的Ip地址</param>
            <param name="port">PLC的端口</param>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Melsec.MelsecMcNet.NetworkNumber">
            <summary>
            网络号，通常为0
            </summary>
            <remarks>
            依据PLC的配置而配置，如果PLC配置了1，那么此处也填0，如果PLC配置了2，此处就填2，测试不通的话，继续测试0
            </remarks>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Melsec.MelsecMcNet.NetworkStationNumber">
            <summary>
            网络站号，通常为0
            </summary>
            <remarks>
            依据PLC的配置而配置，如果PLC配置了1，那么此处也填0，如果PLC配置了2，此处就填2，测试不通的话，继续测试0
            </remarks>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcNet.McAnalysisAddress(System.String,System.UInt16)">
            <summary>
            分析地址的方法，允许派生类里进行重写操作
            </summary>
            <param name="address">地址信息</param>
            <param name="length">数据长度</param>
            <returns>解析后的数据信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcNet.Read(System.String,System.UInt16)">
            <summary>
            从三菱PLC中读取想要的数据，输入地址，按照字单位读取，返回读取结果
            </summary>
            <param name="address">读取地址，格式为"M100","D100","W1A0"</param>
            <param name="length">读取的数据长度，字最大值960，位最大值7168</param>
            <returns>带成功标志的结果数据对象</returns>
            <remarks>
            地址支持的列表参考 <seealso cref="T:HYC.HTPLC.Profinet.Melsec.MelsecMcNet"/> 的备注说明
            </remarks> 
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcNet.Write(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param> 
            <returns>结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcNet.ReadBool(System.String,System.UInt16)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <remarks>
            地址支持的列表参考 <seealso cref="T:HYC.HTPLC.Profinet.Melsec.MelsecMcNet"/> 的备注说明
            </remarks> 
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcNet.ReadBoolByWord(System.String,System.UInt16)">
            <summary>
            读取word区域转换为bool数组
            </summary>  
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcNet.Write(System.String,System.Boolean[])">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入M100,values[0]对应M100
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据，可以指定任意的长度</param> 
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcNet.RemoteRun">
            <summary>
            远程Run操作
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcNet.RemoteStop">
            <summary>
            远程Stop操作
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcNet.RemoteReset">
            <summary>
            远程Reset操作
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcNet.ToString">
            <summary>
            获取当前对象的字符串标识形式
            </summary>
            <returns>字符串信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcNet.PackMcCommand(System.Byte[],System.Byte,System.Byte)">
            <summary>
            将MC协议的核心报文打包成一个可以直接对PLC进行发送的原始报文
            </summary>
            <param name="mcCore">MC协议的核心报文</param>
            <param name="networkNumber">网络号</param>
            <param name="networkStationNumber">网络站号</param>
            <returns>原始报文信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecMcNet.ExtractActualData(System.Byte[],System.Boolean)">
            <summary>
            从PLC反馈的数据中提取出实际的数据内容，需要传入反馈数据，是否位读取
            </summary>
            <param name="response">反馈的数据内容</param>
            <param name="isBit">是否位读取</param>
            <returns>解析后的结果对象</returns>
        </member>
        <member name="T:HYC.HTPLC.Profinet.Melsec.MelsecFxSerial">
            <summary>
            三菱的串口通信的对象，适用于读取FX系列的串口数据，支持的类型参考文档说明
            </summary>
            <remarks>
            字读写地址支持的列表如下：
            <list type="table">
              <listheader>
                <term>地址名称</term>
                <term>地址代号</term>
                <term>示例</term>
                <term>地址范围</term>
                <term>地址进制</term>
                <term>备注</term>
              </listheader>
              <item>
                <term>数据寄存器</term>
                <term>D</term>
                <term>D100,D200</term>
                <term>D0-D511,D8000-D8255</term>
                <term>10</term>
                <term></term>
              </item>
              <item>
                <term>定时器的值</term>
                <term>TN</term>
                <term>TN10,TN20</term>
                <term>TN0-TN255</term>
                <term>10</term>
                <term></term>
              </item>
              <item>
                <term>计数器的值</term>
                <term>CN</term>
                <term>CN10,CN20</term>
                <term>CN0-CN199,CN200-CN255</term>
                <term>10</term>
                <term></term>
              </item>
            </list>
            位地址支持的列表如下：
            <list type="table">
              <listheader>
                <term>地址名称</term>
                <term>地址代号</term>
                <term>示例</term>
                <term>地址范围</term>
                <term>地址进制</term>
                <term>备注</term>
              </listheader>
              <item>
                <term>内部继电器</term>
                <term>M</term>
                <term>M100,M200</term>
                <term>M0-M1023,M8000-M8255</term>
                <term>10</term>
                <term></term>
              </item>
              <item>
                <term>输入继电器</term>
                <term>X</term>
                <term>X1,X20</term>
                <term>X0-X177</term>
                <term>8</term>
                <term></term>
              </item>
              <item>
                <term>输出继电器</term>
                <term>Y</term>
                <term>Y10,Y20</term>
                <term>Y0-Y177</term>
                <term>8</term>
                <term></term>
              </item>
              <item>
                <term>步进继电器</term>
                <term>S</term>
                <term>S100,S200</term>
                <term>S0-S999</term>
                <term>10</term>
                <term></term>
              </item>
              <item>
                <term>定时器触点</term>
                <term>TS</term>
                <term>TS10,TS20</term>
                <term>TS0-TS255</term>
                <term>10</term>
                <term></term>
              </item>
              <item>
                <term>定时器线圈</term>
                <term>TC</term>
                <term>TC10,TC20</term>
                <term>TC0-TC255</term>
                <term>10</term>
                <term></term>
              </item>
              <item>
                <term>计数器触点</term>
                <term>CS</term>
                <term>CS10,CS20</term>
                <term>CS0-CS255</term>
                <term>10</term>
                <term></term>
              </item>
              <item>
                <term>计数器线圈</term>
                <term>CC</term>
                <term>CC10,CC20</term>
                <term>CC0-CC255</term>
                <term>10</term>
                <term></term>
              </item>
            </list>
            </remarks>
            <example>
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\MelsecFxSerial.cs" region="Usage" title="简单的使用" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxSerial.#ctor">
            <summary>
            实例化三菱的串口协议的通讯对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxSerial.Read(System.String,System.UInt16)">
            <summary>
            从三菱PLC中读取想要的数据，返回读取结果
            </summary>
            <param name="address">读取地址，，支持的类型参考文档说明</param>
            <param name="length">读取的数据长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            假设起始地址为D100，D100存储了温度，100.6℃值为1006，D101存储了压力，1.23Mpa值为123，D102，D103存储了产量计数，读取如下：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\MelsecFxSerial.cs" region="ReadExample2" title="Read示例" />
            以下是读取不同类型数据的示例
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\MelsecFxSerial.cs" region="ReadExample1" title="Read示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxSerial.ReadBool(System.String,System.UInt16)">
            <summary>
            从三菱PLC中批量读取位软元件，返回读取结果，该读取地址最好从0，16，32...等开始读取，这样可以读取比较长得数据数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
             <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\MelsecFxSerial.cs" region="ReadBool" title="Bool类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxSerial.Write(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址，支持的类型参考文档说明</param>
            <param name="value">原始的字节数据</param>
            <example>
            假设起始地址为D100，D100存储了温度，100.6℃值为1006，D101存储了压力，1.23Mpa值为123，D102，D103存储了产量计数，写入如下：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\MelsecFxSerial.cs" region="WriteExample2" title="Write示例" />
            以下是读取不同类型数据的示例
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\MelsecFxSerial.cs" region="WriteExample1" title="Write示例" />
            </example>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxSerial.Write(System.String,System.Boolean)">
            <summary>
            强制写入位数据的通断，支持的类型参考文档说明
            </summary>
            <param name="address">地址信息</param>
            <param name="value">是否为通</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxSerial.ToString">
            <summary>
            获取当前对象的字符串标识形式
            </summary>
            <returns>字符串信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxSerial.BuildWriteBoolPacket(System.String,System.Boolean)">
            <summary>
            生成位写入的数据报文信息，该报文可直接用于发送串口给PLC
            </summary>
            <param name="address">地址信息，每个地址存在一定的范围，需要谨慎传入数据。举例：M10,S10,X5,Y10,C10,T10</param>
            <param name="value"><c>True</c>或是<c>False</c></param>
            <returns>带报文信息的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxSerial.BuildReadWordCommand(System.String,System.UInt16)">
            <summary>
            根据类型地址长度确认需要读取的指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="length">长度</param>
            <returns>带有成功标志的指令数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxSerial.BuildReadBoolCommand(System.String,System.UInt16)">
            <summary>
            根据类型地址长度确认需要读取的指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="length">bool数组长度</param>
            <returns>带有成功标志的指令数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxSerial.BuildWriteWordCommand(System.String,System.Byte[])">
            <summary>
            根据类型地址以及需要写入的数据来生成指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="value">实际的数据信息</param>
            <returns>带有成功标志的指令数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxSerial.ExtractActualData(System.Byte[])">
            <summary>
            从PLC反馈的数据进行提炼操作
            </summary>
            <param name="response">PLC反馈的真实数据</param>
            <returns>数据提炼后的真实数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxSerial.ExtractActualBoolData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从PLC反馈的数据进行提炼bool数组操作
            </summary>
            <param name="response">PLC反馈的真实数据</param>
            <param name="start">起始提取的点信息</param>
            <param name="length">bool数组的长度</param>
            <returns>数据提炼后的真实数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxSerial.FxAnalysisAddress(System.String)">
            <summary>
            解析数据地址成不同的三菱地址类型
            </summary>
            <param name="address">数据地址</param>
            <returns>地址结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxSerial.FxCalculateWordStartAddress(System.String)">
            <summary>
            返回读取的地址及长度信息
            </summary>
            <param name="address">读取的地址信息</param>
            <returns>带起始地址的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Melsec.MelsecFxSerial.FxCalculateBoolStartAddress(System.String)">
            <summary>
            返回读取的地址及长度信息，以及当前的偏置信息
            </summary><param name="address">读取的地址信息</param>
            <returns>带起始地址的结果对象</returns>
        </member>
        <member name="T:HYC.HTPLC.Profinet.Omron.OmronFinsDataType">
            <summary>
            欧姆龙的Fins协议的数据类型
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsDataType.#ctor(System.Byte,System.Byte)">
            <summary>
            实例化一个Fins的数据类型
            </summary>
            <param name="bitCode">进行位操作的指令</param>
            <param name="wordCode">进行字操作的指令</param>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Omron.OmronFinsDataType.BitCode">
            <summary>
            进行位操作的指令
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Omron.OmronFinsDataType.WordCode">
            <summary>
            进行字操作的指令
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Omron.OmronFinsDataType.DM">
            <summary>
            DM Area
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Omron.OmronFinsDataType.CIO">
            <summary>
            CIO Area
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Omron.OmronFinsDataType.WR">
            <summary>
            Work Area
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Omron.OmronFinsDataType.HR">
            <summary>
            Holding Bit Area
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Omron.OmronFinsDataType.AR">
            <summary>
            Auxiliary Bit Area
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Profinet.Omron.OmronFinsNet">
            <summary>
            欧姆龙PLC通讯类，采用Fins-Tcp通信协议实现
            </summary>
            <remarks>
            <note type="important">实例化之后，使用之前，需要初始化三个参数信息，具体见三个参数的说明：<see cref="P:HYC.HTPLC.Profinet.Omron.OmronFinsNet.SA1"/>，<see cref="P:HYC.HTPLC.Profinet.Omron.OmronFinsNet.DA1"/>，<see cref="P:HYC.HTPLC.Profinet.Omron.OmronFinsNet.DA2"/></note>
            <note type="important">第二个需要注意的是，当网络异常掉线时，无法立即连接上PLC，PLC对于当前的节点进行拒绝，如果想要支持在断线后的快速连接，就需要将
            <seealso cref="P:HYC.HTPLC.Profinet.Omron.OmronFinsNet.IsChangeSA1AfterReadFailed"/>设置为<c>True</c>，详细的可以参考 <seealso cref="P:HYC.HTPLC.Profinet.Omron.OmronFinsNet.IsChangeSA1AfterReadFailed"/></note>
            <br />
            <note type="warning">如果在测试的时候报错误码64，经网友 上海-Lex 指点，是因为PLC中产生了报警，如伺服报警，模块错误等产生的，但是数据还是能正常读到的，屏蔽64报警或清除plc错误可解决</note>
            地址支持的列表如下：
            <list type="table">
              <listheader>
                <term>地址名称</term>
                <term>地址代号</term>
                <term>示例</term>
                <term>地址进制</term>
                <term>字操作</term>
                <term>位操作</term>
                <term>备注</term>
              </listheader>
              <item>
                <term>DM Area</term>
                <term>D</term>
                <term>D100,D200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>CIO Area</term>
                <term>C</term>
                <term>C100,C200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>Work Area</term>
                <term>W</term>
                <term>W100,W200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>Holding Bit Area</term>
                <term>H</term>
                <term>H100,H200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>Auxiliary Bit Area</term>
                <term>A</term>
                <term>A100,A200</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
              <item>
                <term>EM Area</term>
                <term>E</term>
                <term>E0.0,EF.200,E10.100</term>
                <term>10</term>
                <term>√</term>
                <term>√</term>
                <term></term>
              </item>
            </list>
            </remarks>
            <example>
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\OmronFinsNet.cs" region="Usage" title="简单的短连接使用" />
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\OmronFinsNet.cs" region="Usage2" title="简单的长连接使用" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsNet.#ctor">
            <summary>
            实例化一个欧姆龙PLC Fins帧协议的通讯对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsNet.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个欧姆龙PLC Fins帧协议的通讯对象
            </summary>
            <param name="ipAddress">PLCd的Ip地址</param>
            <param name="port">PLC的端口</param>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Omron.OmronFinsNet.IpAddress">
            <summary>
            设备的Ip地址信息
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Omron.OmronFinsNet.ICF">
            <summary>
            信息控制字段，默认0x80
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Omron.OmronFinsNet.RSV">
            <summary>
            系统使用的内部信息
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Omron.OmronFinsNet.GCT">
            <summary>
            网络层信息，默认0x02，如果有八层消息，就设置为0x07
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Omron.OmronFinsNet.DNA">
            <summary>
            PLC的网络号地址，默认0x00
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Omron.OmronFinsNet.DA1">
            <summary>
            PLC的节点地址，这个值在配置了ip地址之后是默认赋值的，默认为Ip地址的最后一位
            </summary>
            <remarks>
            <note type="important">假如你的PLC的Ip地址为192.168.0.10，那么这个值就是10</note>
            </remarks>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Omron.OmronFinsNet.DA2">
            <summary>
            PLC的单元号地址
            </summary>
            <remarks>
            <note type="important">通常都为0</note>
            </remarks>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Omron.OmronFinsNet.SNA">
            <summary>
            上位机的网络号地址
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Omron.OmronFinsNet.SA1">
            <summary>
            上位机的节点地址，假如你的电脑的Ip地址为192.168.0.13，那么这个值就是13
            </summary>
            <remarks>
            <note type="important">假如你的电脑的Ip地址为192.168.0.13，那么这个值就是13</note>
            </remarks>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Omron.OmronFinsNet.SA2">
            <summary>
            上位机的单元号地址
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Omron.OmronFinsNet.SID">
            <summary>
            设备的标识号
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Omron.OmronFinsNet.IsChangeSA1AfterReadFailed">
            <summary>
            如果设置为<c>True</c>，当数据读取失败的时候，会自动变更当前的SA1值，会选择自动增加，但不会和DA1一致，本值需要在对象实例化之后立即设置。
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsNet.PackCommand(System.Byte[])">
            <summary>
            将普通的指令打包成完整的指令
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsNet.BuildReadCommand(System.String,System.UInt16,System.Boolean)">
            <summary>
            根据类型地址长度确认需要读取的指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="length">长度</param>
            <param name="isBit">是否是位读取</param>
            <returns>带有成功标志的报文数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsNet.BuildWriteCommand(System.String,System.Byte[],System.Boolean)">
            <summary>
            根据类型地址以及需要写入的数据来生成指令头
            </summary>
            <param name="address">起始地址</param>
            <param name="value">真实的数据值信息</param>
            <param name="isBit">是否是位操作</param>
            <returns>带有成功标志的报文数据</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsNet.InitializationOnConnect(System.Net.Sockets.Socket)">
            <summary>
            在连接上欧姆龙PLC后，需要进行一步握手协议
            </summary>
            <param name="socket">连接的套接字</param>
            <returns>初始化成功与否</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsNet.ExtraAfterReadFromCoreServer(HYC.HTPLC.OperateResult)">
            <summary>
            和服务器交互完成的时候调用的方法，无论是成功或是失败，都将会调用，具体的操作需要重写实现
            </summary>
            <param name="read">读取结果</param>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsNet.Read(System.String,System.UInt16)">
            <summary>
            从欧姆龙PLC中读取想要的数据，返回读取结果，读取单位为字
            </summary>
            <param name="address">读取地址，格式为"D100","C100","W100","H100","A100"</param>
            <param name="length">读取的数据长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            假设起始地址为D100，D100存储了温度，100.6℃值为1006，D101存储了压力，1.23Mpa值为123，D102,D103存储了产量计数，读取如下：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\OmronFinsNet.cs" region="ReadExample2" title="Read示例" />
            以下是读取不同类型数据的示例
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\OmronFinsNet.cs" region="ReadExample1" title="Read示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsNet.Write(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址</param>
            <param name="value">原始的字节数据</param>
            <returns>结果</returns>
            <example>
            假设起始地址为D100，D100存储了温度，100.6℃值为1006，D101存储了压力，1.23Mpa值为123，D102,D103存储了产量计数，读取如下：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\OmronFinsNet.cs" region="WriteExample2" title="Write示例" />
            以下是写入不同类型数据的示例
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\OmronFinsNet.cs" region="WriteExample1" title="Write示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsNet.ReadBool(System.String,System.UInt16)">
            <summary>
            从欧姆龙PLC中批量读取位软元件，返回读取结果
            </summary>
            <param name="address">读取地址，格式为"D100","C100","W100","H100","A100"</param>
            <param name="length">读取的长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\OmronFinsNet.cs" region="ReadBool" title="ReadBool示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsNet.Write(System.String,System.Boolean[])">
            <summary>
            向PLC中位软元件写入bool数组，返回值说明，比如你写入D100,values[0]对应D100.0
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据，可以指定任意的长度</param>
            <returns>返回写入结果</returns>
            <example>
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\OmronFinsNet.cs" region="WriteBool" title="WriteBool示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsNet.ToString">
            <summary>
            返回表示当前对象的字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="T:HYC.HTPLC.Profinet.Omron.OmronFinsNetHelper">
            <summary>
            Omron PLC的FINS协议相关的辅助类
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsNetHelper.AnalysisAddress(System.String,System.Boolean)">
            <summary>
            解析数据地址，Omron手册第188页
            </summary>
            <param name="address">数据地址</param>
            <param name="isBit">是否是位地址</param>
            <returns>解析后的结果地址对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsNetHelper.BuildReadCommand(System.String,System.UInt16,System.Boolean)">
            <summary>
            根据读取的地址，长度，是否位读取创建Fins协议的核心报文
            </summary>
            <param name="address">地址，具体格式请参照示例说明</param>
            <param name="length">读取的数据长度</param>
            <param name="isBit">是否使用位读取</param>
            <returns>带有成功标识的Fins核心报文</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsNetHelper.BuildWriteWordCommand(System.String,System.Byte[],System.Boolean)">
            <summary>
            根据写入的地址，数据，是否位写入生成Fins协议的核心报文
            </summary>
            <param name="address">地址内容，具体格式请参照示例说明</param>
            <param name="value">实际的数据</param>
            <param name="isBit">是否位数据</param>
            <returns>带有成功标识的Fins核心报文</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsNetHelper.ResponseValidAnalysis(System.Byte[],System.Boolean)">
            <summary>
            验证欧姆龙的Fins-TCP返回的数据是否正确的数据，如果正确的话，并返回所有的数据内容
            </summary>
            <param name="response">来自欧姆龙返回的数据内容</param>
            <param name="isRead">是否读取</param>
            <returns>带有是否成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsNetHelper.UdpResponseValidAnalysis(System.Byte[],System.Boolean)">
            <summary>
            验证欧姆龙的Fins-Udp返回的数据是否正确的数据，如果正确的话，并返回所有的数据内容
            </summary>
            <param name="response">来自欧姆龙返回的数据内容</param>
            <param name="isRead">是否读取</param>
            <returns>带有是否成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Omron.OmronFinsNetHelper.GetStatusDescription(System.Int32)">
            <summary>
            获取错误信息的字符串描述文本
            </summary>
            <param name="err">错误码</param>
            <returns>文本描述</returns>
        </member>
        <member name="T:HYC.HTPLC.Profinet.Panasonic.PanasonicMcNet">
            <summary>
            松下PLC的MC协议的信息，具体的地址格式请参考备注说明
            </summary> 
        </member>
        <member name="M:HYC.HTPLC.Profinet.Panasonic.PanasonicMcNet.#ctor">
            <summary>
            实例化松下的的Qna兼容3E帧协议的通讯对象
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Panasonic.PanasonicMcNet.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个基恩士的Qna兼容3E帧协议的通讯对象
            </summary>
            <param name="ipAddress">PLC的Ip地址</param>
            <param name="port">PLC的端口</param>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Panasonic.PanasonicMcNet.McAnalysisAddress(System.String,System.UInt16)">
            <summary>
            分析地址的方法，允许派生类里进行重写操作
            </summary>
            <param name="address">地址信息</param>
            <param name="length">数据长度</param>
            <returns>解析后的数据信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Panasonic.PanasonicMcNet.ToString">
            <summary>
            返回表示当前对象的字符串
            </summary>
            <returns>字符串信息</returns>
        </member>
        <member name="T:HYC.HTPLC.Profinet.Panasonic.PanasonicMewtocol">
            <summary>
            松下PLC的数据交互协议，采用Mewtocol协议通讯
            </summary> 
        </member>
        <member name="M:HYC.HTPLC.Profinet.Panasonic.PanasonicMewtocol.#ctor(System.Byte)">
            <summary>
            实例化一个默认的松下PLC通信对象，默认站号为1
            </summary>
            <param name="station">站号信息，默认为0xEE</param>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Panasonic.PanasonicMewtocol.Station">
            <summary>
            设备的目标站号
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Panasonic.PanasonicMewtocol.Read(System.String,System.UInt16)">
            <summary>
            从松下PLC中读取数据
            </summary>
            <param name="address">起始地址</param>
            <param name="length">长度</param>
            <returns>返回数据信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Panasonic.PanasonicMewtocol.Write(System.String,System.Byte[])">
            <summary>
            将数据写入到松下PLC中
            </summary>
            <param name="address">起始地址</param>
            <param name="value">真实数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Panasonic.PanasonicMewtocol.ReadBool(System.String,System.UInt16)">
            <summary>
            批量读取松下PLC的位数据
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数据长度</param>
            <returns>读取结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Panasonic.PanasonicMewtocol.Write(System.String,System.Boolean[])">
            <summary>
            写入bool数据信息，存在一定的风险，谨慎操作
            </summary>
            <param name="address">起始地址</param>
            <param name="values">数据值信息</param>
            <returns>返回是否成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Panasonic.PanasonicMewtocol.ToString">
            <summary>
            返回表示当前对象的字符串
            </summary>
            <returns>字符串信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Panasonic.PanasonicMewtocol.AnalysisAddress(System.String)">
            <summary>
            解析数据地址，解析出地址类型，起始地址，DB块的地址
            </summary>
            <param name="address">数据地址</param>
            <returns>解析出地址类型，起始地址，是否位读取</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Panasonic.PanasonicMewtocol.BuildReadMultiCoil(System.String[])">
            <summary>
            创建读取离散触点的报文指令
            </summary>
            <param name="address">地址信息</param>
            <returns>包含是否成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Panasonic.PanasonicMewtocol.BuildWriteMultiCoil(System.String[],System.Boolean[])">
            <summary>
            创建写入离散触点的报文指令
            </summary>
            <param name="address">地址信息</param>
            <param name="values">bool值数组</param>
            <returns>包含是否成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Panasonic.PanasonicMewtocol.BuildReadCommand(System.Byte,System.String,System.UInt16)">
            <summary>
            创建批量读取触点的报文指令
            </summary>
            <param name="station">站号信息</param>
            <param name="address">地址信息</param>
            <param name="length">数据长度</param>
            <returns>包含是否成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Panasonic.PanasonicMewtocol.BuildWriteCommand(System.Byte,System.String,System.Byte[],System.Int16)">
            <summary>
            创建批量读取触点的报文指令
            </summary>
            <param name="station">设备站号</param>
            <param name="address">地址信息</param>
            <param name="values">数据值</param>
            <param name="length">数据长度</param>
            <returns>包含是否成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Panasonic.PanasonicMewtocol.ExtraActualData(System.Byte[])">
            <summary>
            检查从PLC反馈的数据，并返回正确的数据内容
            </summary>
            <param name="response">反馈信号</param>
            <returns>是否成功的结果信息</returns>
        </member>
        <member name="T:HYC.HTPLC.Profinet.Siemens.SiemensFetchWriteNet">
            <summary>
            使用了Fetch/Write协议来和西门子进行通讯，该种方法需要在PLC侧进行一些配置 -> 
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensFetchWriteNet.#ctor">
            <summary>
            实例化一个西门子的Fetch/Write协议的通讯对象 ->
            Instantiate a communication object for a Siemens Fetch/write protocol
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensFetchWriteNet.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个西门子的Fetch/Write协议的通讯对象 ->
            Instantiate a communication object for a Siemens Fetch/write protocol
            </summary>
            <param name="ipAddress">PLC的Ip地址 -> Specify IP Address</param>
            <param name="port">PLC的端口 -> Specify IP Port</param>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensFetchWriteNet.Read(System.String,System.UInt16)">
            <summary>
            从PLC读取数据，地址格式为I100，Q100，DB20.100，M100，T100，C100，以字节为单位 ->
            Read data from PLC, address format I100,Q100,DB20.100,M100,T100,C100, in bytes
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100，T100，C100 ->
            Starting address, formatted as I100,M100,Q100,DB20.100,T100,C100
            </param>
            <param name="length">读取的数量，以字节为单位 -> The number of reads, in bytes</param>
            <returns>带有成功标志的字节信息 -> Byte information with a success flag</returns>
            <example>
            假设起始地址为M100，M100存储了温度，100.6℃值为1006，M102存储了压力，1.23Mpa值为123，M104，M105，M106，M107存储了产量计数，读取如下：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\SiemensFetchWriteNet.cs" region="ReadExample2" title="Read示例" />
            以下是读取不同类型数据的示例
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\SiemensFetchWriteNet.cs" region="ReadExample1" title="Read示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensFetchWriteNet.ReadByte(System.String)">
            <summary>
            读取指定地址的byte数据 -> Reads the byte data for the specified address
            </summary>
            <param name="address">起始地址，格式为M100,I100,Q100,DB1.100 -> Starting address, formatted as M100,I100,Q100,DB1.100</param>
            <returns>byte类型的结果对象 -> Result object of type Byte</returns>
            <remarks>
            <note type="warning">
            不适用于DB块，定时器，计数器的数据读取，会提示相应的错误，读取长度必须为偶数
            </note>
            </remarks>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.Byte[])">
            <summary>
            将数据写入到PLC数据，地址格式为I100，Q100，DB20.100，M100，以字节为单位 ->
            Writes data to the PLC data, in the address format i100,q100,db20.100,m100, in bytes
            </summary>
            <param name="address">起始地址，格式为M100,I100,Q100,DB1.100 -> Starting address, formatted as M100,I100,Q100,DB1.100</param>
            <param name="value">要写入的实际数据 -> The actual data to write</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
            <example>
            假设起始地址为M100，M100,M101存储了温度，100.6℃值为1006，M102,M103存储了压力，1.23Mpa值为123，M104-M107存储了产量计数，写入如下：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\SiemensFetchWriteNet.cs" region="WriteExample2" title="Write示例" />
            以下是写入不同类型数据的示例
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\SiemensFetchWriteNet.cs" region="WriteExample1" title="Write示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.Boolean[])">
            <summary>
            向PLC中写入bool数组，返回值说明，比如你写入M100,那么data[0]对应M100.0 ->
            Write the bool array to the PLC, return the value description, for example, if you write M100, then data[0] corresponds to M100.0
            </summary>
            <param name="address">起始地址，格式为M100,I100,Q100,DB1.100 -> Starting address, formatted as M100,I100,Q100,DB1.100</param>
            <param name="values">要写入的实际数据，长度为8的倍数 -> The actual data to write, a multiple of 8 in length</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
            <remarks>
            <note type="warning">
            批量写入bool数组存在一定的风险，原因是只能批量写入长度为8的倍数的数组，否则会影响其他的位的数据，请谨慎使用。 ->
            There is a risk in bulk writing to a bool array, because it is possible to write arrays of multiples of length 8 in bulk, otherwise it will affect the data of other bits, please use sparingly.
            </note>
            </remarks>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensFetchWriteNet.Write(System.String,System.Byte)">
            <summary>
            向PLC中写入byte数据，返回是否写入成功 -> Writes byte data to the PLC and returns whether the write succeeded
            </summary>
            <param name="address">起始地址，格式为M100,I100,Q100,DB1.100 -> Starting address, formatted as M100,I100,Q100,DB1.100</param>
            <param name="value">要写入的实际数据 -> The actual data to write</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensFetchWriteNet.ToString">
            <summary>
            返回表示当前对象的字符串 -> Returns a String representing the current object
            </summary>
            <returns>字符串数据 -> String data</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensFetchWriteNet.CalculateAddressStarted(System.String)">
            <summary>
            计算特殊的地址信息
            </summary>
            <param name="address">字符串信息</param>
            <returns>实际值</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensFetchWriteNet.AnalysisAddress(System.String)">
            <summary>
            解析数据地址，解析出地址类型，起始地址，DB块的地址 -> Parse data address, parse out address type, start address, db block address
            </summary>
            <param name="address">起始地址，格式为M100,I100,Q100,DB1.100 -> Starting address, formatted as M100,I100,Q100,DB1.100</param>
            <returns>解析出地址类型，起始地址，DB块的地址 -> Resolves address type, start address, db block address</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensFetchWriteNet.BuildReadCommand(System.String,System.UInt16)">
            <summary>
            生成一个读取字数据指令头的通用方法 -> A general method for generating a command header to read a Word data
            </summary>
            <param name="address">起始地址，格式为M100,I100,Q100,DB1.100 -> Starting address, formatted as M100,I100,Q100,DB1.100</param>
            <param name="count">读取数据个数 -> Number of Read data</param>
            <returns>带结果对象的报文数据 -> Message data with a result object</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensFetchWriteNet.BuildWriteCommand(System.String,System.Byte[])">
            <summary>
            生成一个写入字节数据的指令 -> Generate an instruction to write byte data
            </summary>
            <param name="address">起始地址，格式为M100,I100,Q100,DB1.100 -> Starting address, formatted as M100,I100,Q100,DB1.100</param>
            <param name="data">实际的写入的内容 -> The actual content of the write</param>
            <returns>带结果对象的报文数据 -> Message data with a result object</returns>
        </member>
        <member name="T:HYC.HTPLC.Profinet.Siemens.SiemensPLCS">
            <summary>
            西门子的PLC类型，目前支持的访问类型
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Siemens.SiemensPLCS.S1200">
            <summary>
            1200系列
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Siemens.SiemensPLCS.S300">
            <summary>
            300系列
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Siemens.SiemensPLCS.S400">
            <summary>
            400系列
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Siemens.SiemensPLCS.S1500">
            <summary>
            1500系列PLC
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Siemens.SiemensPLCS.S200Smart">
            <summary>
            200的smart系列
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Profinet.Siemens.SiemensPLCS.S200">
            <summary>
            200系统，需要额外配置以太网模块
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Profinet.Siemens.SiemensPPI">
            <summary>
            西门子的PPI协议，适用于s7-200plc，注意，本类库有个致命的风险需要注意，由于本类库的每次通讯分成2次操作，故而不支持多线程同时读写，当发生线程竞争的时候，会导致数据异常，
            想要解决的话，需要您在每次数据交互时添加同步锁。
            </summary>
            <remarks>
            注意：M地址范围有限 0-31地址
            </remarks>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensPPI.#ctor">
            <summary>
            实例化一个西门子的PPI协议对象
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Siemens.SiemensPPI.Station">
            <summary>
            西门子PLC的站号信息
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensPPI.Read(System.String,System.UInt16)">
            <summary>
            从西门子的PLC中读取数据信息，地址为"M100","AI100","I0","Q0","V100","S100"等，详细请参照API文档
            </summary>
            <param name="address">西门子的地址数据信息</param>
            <param name="length">数据长度</param>
            <returns>带返回结果的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensPPI.ReadBool(System.String,System.UInt16)">
            <summary>
            从西门子的PLC中读取bool数据信息，地址为"M100.0","AI100.1","I0.3","Q0.6","V100.4","S100"等，详细请参照API文档
            </summary>
            <param name="address">西门子的地址数据信息</param>
            <param name="length">数据长度</param>
            <returns>带返回结果的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensPPI.Write(System.String,System.Byte[])">
            <summary>
            将字节数据写入到西门子PLC中，地址为"M100.0","AI100.1","I0.3","Q0.6","V100.4","S100"等，详细请参照API文档
            </summary>
            <param name="address">西门子的地址数据信息</param>
            <param name="value">数据长度</param>
            <returns>带返回结果的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensPPI.Write(System.String,System.Boolean[])">
            <summary>
            将bool数据写入到西门子PLC中，地址为"M100.0","AI100.1","I0.3","Q0.6","V100.4","S100"等，详细请参照API文档
            </summary>
            <param name="address">西门子的地址数据信息</param>
            <param name="value">数据长度</param>
            <returns>带返回结果的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensPPI.ReadByte(System.String)">
            <summary>
            从西门子的PLC中读取byte数据信息，地址为"M100.0","AI100.1","I0.3","Q0.6","V100.4","S100"等，详细请参照API文档
            </summary>
            <param name="address">西门子的地址数据信息</param>
            <returns>带返回结果的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensPPI.WriteByte(System.String,System.Byte)">
            <summary>
            将byte数据写入到西门子PLC中，地址为"M100.0","AI100.1","I0.3","Q0.6","V100.4","S100"等，详细请参照API文档
            </summary>
            <param name="address">西门子的地址数据信息</param>
            <param name="value">数据长度</param>
            <returns>带返回结果的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensPPI.Start">
            <summary>
            启动西门子PLC为RUN模式
            </summary>
            <returns>是否启动成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensPPI.Stop">
            <summary>
            停止西门子PLC，切换为Stop模式
            </summary>
            <returns>是否停止成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensPPI.ToString">
            <summary>
            返回表示当前对象的字符串
            </summary>
            <returns>字符串信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensPPI.AnalysisAddress(System.String)">
            <summary>
            解析数据地址，解析出地址类型，起始地址，DB块的地址 ->
            Parse data address, parse out address type, start address, db block address
            </summary>
            <param name="address">起始地址，例如M100，I0，Q0，V100 ->
            Start address, such as M100,I0,Q0,V100</param>
            <returns>解析数据地址，解析出地址类型，起始地址，DB块的地址 ->
            Parse data address, parse out address type, start address, db block address</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensPPI.BuildReadCommand(System.Byte,System.String,System.UInt16,System.Boolean)">
            <summary>
            生成一个读取字数据指令头的通用方法 ->
            A general method for generating a command header to read a Word data
            </summary>
            <param name="station">设备的站号信息 -> Station number information for the device</param>
            <param name="address">起始地址，例如M100，I0，Q0，V100 ->
            Start address, such as M100,I0,Q0,V100</param>
            <param name="length">读取数据长度 -> Read Data length</param>
            <param name="isBit">是否为位读取</param>
            <returns>包含结果对象的报文 -> Message containing the result object</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensPPI.BuildWriteCommand(System.Byte,System.String,System.Byte[])">
            <summary>
            生成一个写入PLC数据信息的报文内容
            </summary>
            <param name="station">PLC的站号</param>
            <param name="address">地址</param>
            <param name="values">数据值</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensPPI.GetMsgFromStatus(System.Byte)">
            <summary>
            根据错误信息，获取到文本信息
            </summary>
            <param name="code">状态</param>
            <returns>消息文本</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensPPI.GetMsgFromStatus(System.Byte,System.Byte)">
            <summary>
            根据错误信息，获取到文本信息
            </summary>
            <param name="errorClass">错误类型</param>
            <param name="errorCode">错误代码</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensPPI.BuildWriteCommand(System.Byte,System.String,System.Boolean[])">
            <summary>
            创建写入PLC的bool类型数据报文指令
            </summary>
            <param name="station">PLC的站号信息</param>
            <param name="address">地址信息</param>
            <param name="values">bool[]数据值</param>
            <returns>带有成功标识的结果对象</returns>
        </member>
        <member name="T:HYC.HTPLC.Profinet.Siemens.SiemensS7Net">
            <summary>
            一个西门子的客户端类，使用S7协议来进行数据交互 ->
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.#ctor(HYC.HTPLC.Profinet.Siemens.SiemensPLCS)">
            <summary>
            实例化一个西门子的S7协议的通讯对象 ->
            Instantiate a communication object for a Siemens S7 protocol
            </summary>
            <param name="siemens">指定西门子的型号</param>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.#ctor(HYC.HTPLC.Profinet.Siemens.SiemensPLCS,System.String)">
            <summary>
            实例化一个西门子的S7协议的通讯对象并指定Ip地址 ->
            Instantiate a communication object for a Siemens S7 protocol and specify an IP address
            </summary>
            <param name="siemens">指定西门子的型号</param>
            <param name="ipAddress">Ip地址</param>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.Initialization(HYC.HTPLC.Profinet.Siemens.SiemensPLCS,System.String)">
            <summary>
            初始化方法 -> Initialize method
            </summary>
            <param name="siemens">指定西门子的型号 -> Designation of Siemens</param>
            <param name="ipAddress">Ip地址 -> IpAddress</param>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.Slot">
            <summary>
            PLC的槽号，针对S7-400的PLC设置的
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.Rack">
            <summary>
            PLC的机架号，针对S7-400的PLC设置的
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.InitializationOnConnect(System.Net.Sockets.Socket)">
            <summary>
            连接上服务器后需要进行的二次握手操作 -> Two handshake actions required after connecting to the server
            </summary>
            <param name="socket">网络套接字 -> Network sockets</param>
            <returns>是否初始化成功，依据具体的协议进行重写 ->
            Whether the initialization succeeds and is rewritten according to the specific protocol</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.ReadOrderNumber">
            <summary>
            从PLC读取订货号信息 -> Reading order number information from PLC
            </summary>
            <returns>CPU的订货号信息 -> Order number information for the CPU</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.HotStart">
            <summary>
            对PLC进行热启动
            </summary>
            <returns>是否启动成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.ColdStart">
            <summary>
            对PLC进行冷启动
            </summary>
            <returns>是否启动成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.Stop">
            <summary>
            对PLC进行停止
            </summary>
            <returns>是否启动成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.Read(System.String,System.UInt16)">
            <summary>
            从PLC读取数据，地址格式为I100，Q100，DB20.100，M100，T100，C100以字节为单位 ->
            Read data from PLC, address format I100，Q100，DB20.100，M100，T100，C100 in bytes
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100 ->
            Starting address, formatted as I100,M100,Q100,DB20.100</param>
            <param name="length">读取的数量，以字节为单位 -> The number of reads, in bytes</param>
            <returns>是否读取成功的结果对象 -> Whether to read the successful result object</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.ReadBitFromPLC(System.String)">
            <summary>
            从PLC读取数据，地址格式为I100，Q100，DB20.100，M100，以位为单位 ->
            Read the data from the PLC, the address format is I100，Q100，DB20.100，M100, in bits units
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100 ->
            Starting address, formatted as I100,M100,Q100,DB20.100</param>
            <returns>是否读取成功的结果对象 -> Whether to read the successful result object</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.Read(System.String[],System.UInt16[])">
            <summary>
            一次性从PLC获取所有的数据，按照先后顺序返回一个统一的Buffer，需要按照顺序处理，两个数组长度必须一致，数组长度无限制 ->
            One-time from the PLC to obtain all the data, in order to return a unified buffer, need to be processed sequentially, two array length must be consistent
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100 ->
            Starting address, formatted as I100,M100,Q100,DB20.100</param>
            <param name="length">数据长度数组 -> Array of data Lengths</param>
            <returns>是否读取成功的结果对象 -> Whether to read the successful result object</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <remarks>
            <note type="warning">原先的批量的长度为19，现在已经内部自动处理整合，目前的长度为任意和长度。</note>
            </remarks>
            <example>
            参照<see cref="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.Read(System.String,System.UInt16)"/>
            </example>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.Read(HYC.HTPLC.Core.Address.S7AddressData[])">
            <summary>
            读取西门子的地址数据信息，支持任意个数的数据读取 ->
            Read Siemens address data information, support any number of data reading
            </summary>
            <param name="s7Addresses">西门子的数据地址 -> Siemens data address</param>
            <returns>返回的结果对象信息 -> Whether to read the successful result object</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.ReadS7AddressData(HYC.HTPLC.Core.Address.S7AddressData[])">
            <summary>
            单次的读取，只能读取最多19个数组的长度，所以不再对外公开该方法
            </summary>
            <param name="s7Addresses">西门子的地址对象</param>
            <returns>返回的结果对象信息</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.ReadBool(System.String)">
            <summary>
            读取指定地址的bool数据，地址格式为I100，M100，Q100，DB20.100 -> 
            reads bool data for the specified address in the format I100，M100，Q100，DB20.100
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100 ->
            Starting address, formatted as I100,M100,Q100,DB20.100</param>
            <returns>是否读取成功的结果对象 -> Whether to read the successful result object</returns>
            <remarks>
            <note type="important">
            对于200smartPLC的V区，就是DB1.X，例如，V100=DB1.100
            </note>
            </remarks>
            <example>
            假设读取M100.0的位是否通断
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\SiemensS7Net.cs" region="ReadBool" title="ReadBool示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.ReadByte(System.String)">
            <summary>
            读取指定地址的byte数据，地址格式I100，M100，Q100，DB20.100 ->
            Reads the byte data of the specified address, the address format I100,Q100,DB20.100,M100
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100 ->
            Starting address, formatted as I100,M100,Q100,DB20.100</param>
            <returns>是否读取成功的结果对象 -> Whether to read the successful result object</returns>
            <example>参考<see cref="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.Read(System.String,System.UInt16)"/>的注释</example>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.WriteBase(System.Byte[])">
            <summary>
            基础的写入数据的操作支持 -> Operational support for the underlying write data
            </summary>
            <param name="entireValue">完整的字节数据 -> Full byte data</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.Write(System.String,System.Byte[])">
            <summary>
            将数据写入到PLC数据，地址格式为I100，Q100，DB20.100，M100，以字节为单位 ->
            Writes data to the PLC data, in the address format I100,Q100,DB20.100,M100, in bytes
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100 ->
            Starting address, formatted as I100,M100,Q100,DB20.100</param>
            <param name="value">写入的原始数据 -> Raw data written to</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.Write(System.String,System.Boolean)">
            <summary>
            写入PLC的一个位，例如"M100.6"，"I100.7"，"Q100.0"，"DB20.100.0"，如果只写了"M100"默认为"M100.0" ->
            Write a bit of PLC, for example  "M100.6",  "I100.7",  "Q100.0",  "DB20.100.0", if only write  "M100" defaults to  "M100.0"
            </summary>
            <param name="address">起始地址，格式为"M100.6",  "I100.7",  "Q100.0",  "DB20.100.0" ->
            Start address, format  "M100.6",  "I100.7",  "Q100.0",  "DB20.100.0"</param>
            <param name="value">写入的数据，True或是False -> Writes the data, either True or False</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
            <example>
            假设写入M100.0的位是否通断
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Profinet\SiemensS7Net.cs" region="WriteBool" title="WriteBool示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.Write(System.String,System.Boolean[])">
            <summary>
            向PLC中写入bool数组，比如你写入M100,那么data[0]对应M100.0 ->
            Write the bool array to the PLC, for example, if you write M100, then data[0] corresponds to M100.0
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100 -> Starting address, formatted as I100,mM100,Q100,DB20.100</param>
            <param name="values">要写入的bool数组，长度为8的倍数 -> The bool array to write, a multiple of 8 in length</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
            <remarks>
            <note type="warning">
            批量写入bool数组存在一定的风险，原因是只能批量写入长度为8的倍数的数组，否则会影响其他的位的数据，请谨慎使用。
            </note>
            </remarks>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.Write(System.String,System.Byte)">
            <summary>
            向PLC中写入byte数据，返回值说明 -> Write byte data to the PLC, return value description
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100 -> Starting address, formatted as I100,mM100,Q100,DB20.100</param>
            <param name="value">byte数据 -> Byte data</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.Write(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteString" title="String类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.ReadString(System.String,System.UInt16)">
            <summary>
            读取西门子的地址的字符串信息，这个信息是和西门子绑定在一起，长度随西门子的信息动态变化的
            </summary>
            <param name="address">数据地址，具体的格式需要参照类的说明文档</param>
            <param name="valueLenth"></param>
            <returns>带有是否成功的字符串结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.ToString">
            <summary>
            返回表示当前对象的字符串 -> Returns a String representing the current object
            </summary>
            <returns>字符串信息 -> String information</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.BuildReadCommand(HYC.HTPLC.Core.Address.S7AddressData[])">
            <summary>
            A general method for generating a command header to read a Word data
            </summary>
            <param name="s7Addresses">siemens address</param>
            <returns>Message containing the result object</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.BuildBitReadCommand(System.String)">
            <summary>
            生成一个位读取数据指令头的通用方法 ->
            A general method for generating a bit-read-Data instruction header
            </summary>
            <param name="address">起始地址，例如M100.0，I0.1，Q0.1，DB2.100.2 ->
            Start address, such as M100.0,I0.1,Q0.1,DB2.100.2
            </param>
            <returns>包含结果对象的报文 -> Message containing the result object</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.BuildWriteByteCommand(HYC.HTPLC.OperateResult{HYC.HTPLC.Core.Address.S7AddressData},System.Byte[])">
            <summary>
            生成一个写入字节数据的指令 -> Generate an instruction to write byte data
            </summary>
            <param name="analysis">起始地址，示例M100,I100,Q100,DB1.100 -> Start Address, example M100,I100,Q100,DB1.100</param>
            <param name="data">原始的字节数据 -> Raw byte data</param>
            <returns>包含结果对象的报文 -> Message containing the result object</returns>
        </member>
        <member name="M:HYC.HTPLC.Profinet.Siemens.SiemensS7Net.BuildWriteBitCommand(System.String,System.Boolean)">
            <summary>
            生成一个写入位数据的指令 -> Generate an instruction to write bit data
            </summary>
            <param name="address">起始地址，示例M100,I100,Q100,DB1.100 -> Start Address, example M100,I100,Q100,DB1.100</param>
            <param name="data">是否通断 -> Power on or off</param>
            <returns>包含结果对象的报文 -> Message containing the result object</returns>
        </member>
        <member name="T:HYC.HTPLC.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Serial.SoftCRC16">
            <summary>
            用于CRC16验证的类，提供了标准的验证方法
            </summary>
            <remarks>
            本类提供了几个静态的方法，用来进行CRC16码的计算和验证的，多项式码可以自己指定配置，但是预置的寄存器为0xFF 0xFF
            </remarks>
        </member>
        <member name="M:HYC.HTPLC.Serial.SoftCRC16.CheckCRC16(System.Byte[])">
            <summary>
            来校验对应的接收数据的CRC校验码，默认多项式码为0xA001
            </summary>
            <param name="value">需要校验的数据，带CRC校验码</param>
            <returns>返回校验成功与否</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SoftCRC16.CheckCRC16(System.Byte[],System.Byte,System.Byte)">
            <summary>
            指定多项式码来校验对应的接收数据的CRC校验码
            </summary>
            <param name="value">需要校验的数据，带CRC校验码</param>
            <param name="CH">多项式码高位</param>
            <param name="CL">多项式码低位</param>
            <returns>返回校验成功与否</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SoftCRC16.CRC16(System.Byte[])">
            <summary>
            获取对应的数据的CRC校验码，默认多项式码为0xA001
            </summary>
            <param name="value">需要校验的数据，不包含CRC字节</param>
            <returns>返回带CRC校验码的字节数组，可用于串口发送</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SoftCRC16.CRC16(System.Byte[],System.Byte,System.Byte)">
            <summary>
            通过指定多项式码来获取对应的数据的CRC校验码
            </summary>
            <param name="value">需要校验的数据，不包含CRC字节</param>
            <param name="CL">多项式码地位</param>
            <param name="CH">多项式码高位</param>
            <returns>返回带CRC校验码的字节数组，可用于串口发送</returns>
        </member>
        <member name="T:HYC.HTPLC.Serial.SerialBase">
            <summary>
            所有串行通信类的基类，提供了一些基础的服务
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialBase.#ctor">
            <summary>
            实例化一个无参的构造方法
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialBase.SerialPortInni(System.String)">
            <summary>
            初始化串口信息，9600波特率，8位数据位，1位停止位，无奇偶校验
            </summary>
            <param name="portName">端口号信息，例如"COM3"</param>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialBase.SerialPortInni(System.String,System.Int32)">
            <summary>
            初始化串口信息，波特率，8位数据位，1位停止位，无奇偶校验
            </summary>
            <param name="portName">端口号信息，例如"COM3"</param>
            <param name="baudRate">波特率</param>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialBase.SerialPortInni(System.String,System.Int32,System.Int32,System.IO.Ports.StopBits,System.IO.Ports.Parity)">
            <summary>
            初始化串口信息，波特率，数据位，停止位，奇偶校验需要全部自己来指定
            </summary>
            <param name="portName">端口号信息，例如"COM3"</param>
            <param name="baudRate">波特率</param>
            <param name="dataBits">数据位</param>
            <param name="stopBits">停止位</param>
            <param name="parity">奇偶校验</param>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialBase.SerialPortInni(System.Action{System.IO.Ports.SerialPort})">
            <summary>
            根据自定义初始化方法进行初始化串口信息
            </summary>
            <param name="initi">初始化的委托方法</param>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialBase.Open">
            <summary>
            打开一个新的串行端口连接
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialBase.IsOpen">
            <summary>
            获取一个值，指示串口是否处于打开状态
            </summary>
            <returns>是或否</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialBase.Close">
            <summary>
            关闭端口连接
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialBase.ReadBase(System.Byte[])">
            <summary>
            读取串口的数据
            </summary>
            <param name="send">发送的原始字节数据</param>
            <returns>带接收字节的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialBase.ClearSerialCache">
            <summary>
            清除串口缓冲区的数据，并返回该数据，如果缓冲区没有数据，返回的字节数组长度为0
            </summary>
            <returns>是否操作成功的方法</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialBase.CheckReceiveBytes(System.Byte[])">
            <summary>
            检查当前接收的字节数据是否正确的
            </summary>
            <param name="rBytes">输入字节</param>
            <returns>检查是否正确</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialBase.InitializationOnOpen">
            <summary>
            在打开端口时的初始化方法，按照协议的需求进行必要的重写
            </summary>
            <returns>是否初始化成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialBase.ExtraOnClose">
            <summary>
            在将要和服务器进行断开的情况下额外的操作，需要根据对应协议进行重写
            </summary>
            <returns>当断开连接时额外的操作结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialBase.SPSend(System.IO.Ports.SerialPort,System.Byte[])">
            <summary>
            发送数据到串口里去
            </summary>
            <param name="serialPort">串口对象</param>
            <param name="data">字节数据</param>
            <returns>是否发送成功</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialBase.SPReceived(System.IO.Ports.SerialPort,System.Boolean)">
            <summary>
            从串口接收一串数据信息，可以指定是否一定要接收到数据
            </summary>
            <param name="serialPort">串口对象</param>
            <param name="awaitData">是否必须要等待数据返回</param>
            <returns>结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialBase.ToString">
            <summary>
            返回表示当前对象的字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="P:HYC.HTPLC.Serial.SerialBase.ReceiveTimeout">
            <summary>
            接收数据的超时时间，默认5000ms
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Serial.SerialBase.SleepTime">
            <summary>
            连续串口缓冲数据检测的间隔时间，默认20ms
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Serial.SerialBase.IsClearCacheBeforeRead">
            <summary>
            是否在发送数据前清空缓冲数据，默认是false
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Serial.SerialBase.PortName">
            <summary>
            本连接对象的端口号名称
            </summary>
        </member>
        <member name="P:HYC.HTPLC.Serial.SerialBase.BaudRate">
            <summary>
            本连接对象的波特率
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialBase.Dispose(System.Boolean)">
            <summary>
            释放当前的对象
            </summary>
            <param name="disposing">是否在</param>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialBase.Dispose">
            <summary>
            释放当前的对象
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Serial.SerialBase.SP_ReadData">
            <summary>
            串口交互的核心
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Serial.SerialBase.hybirdLock">
            <summary>
            数据交互的锁
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Serial.SerialBase.receiveTimeout">
            <summary>
            接收数据的超时时间
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Serial.SerialBase.sleepTime">
            <summary>
            睡眠的时间
            </summary>
        </member>
        <member name="F:HYC.HTPLC.Serial.SerialBase.isClearCacheBeforeRead">
            <summary>
            是否在发送前清除缓冲
            </summary>
        </member>
        <member name="T:HYC.HTPLC.Serial.SerialDeviceBase`1">
            <summary>
            基于串口的设备交互类的对象，需要从本类继承，然后实现不同的设备读写操作。
            </summary>
            <typeparam name="TTransform">数据解析的规则泛型</typeparam>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.#ctor">
            <summary>
            默认的构造方法实现的设备信息
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Read(System.String,System.UInt16)">
            <summary>
            从设备读取原始数据
            </summary>
            <param name="address">起始地址</param>
            <param name="length">地址长度</param>
            <returns>带有成功标识的结果对象</returns>
            <remarks>需要在继承类中重写实现，并且实现地址解析操作</remarks>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Read(System.String)">
            <summary>
            从设备读取原始数据
            </summary>
            <param name="address">起始地址</param> 
            <returns>带有成功标识的结果对象</returns>
            <remarks>需要在继承类中重写实现，并且实现地址解析操作</remarks>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.Byte[])">
            <summary>
            将原始数据写入设备
            </summary>
            <param name="address">起始地址</param>
            <param name="value">原始数据</param>
            <returns>带有成功标识的结果对象</returns>
            <remarks>需要在继承类中重写实现，并且实现地址解析操作</remarks>
        </member>
        <member name="P:HYC.HTPLC.Serial.SerialDeviceBase`1.WordLength">
            <summary>
            单个数据字节的长度，西门子为2，三菱，欧姆龙，modbusTcp就为1
            </summary>
            <remarks>对设备来说，一个地址的数据对应的字节数，或是1个字节或是2个字节</remarks>
        </member>
        <member name="P:HYC.HTPLC.Serial.SerialDeviceBase`1.ByteTransform">
            <summary>
            当前客户端的数据变换机制，当你需要从字节数据转换类型数据的时候需要。
            </summary>
            <example>
            主要是用来转换数据类型的，下面仅仅演示了2个方法，其他的类型转换，类似处理。
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDoubleBase.cs" region="ByteTransform" title="ByteTransform示例" />
            </example>
        </member>
        <member name="P:HYC.HTPLC.Serial.SerialDeviceBase`1.ConnectionId">
            <summary>
            当前连接的唯一ID号，默认为长度20的guid码加随机数组成，方便列表管理，也可以自己指定
            </summary>
            <remarks>
            Current Connection ID, conclude guid and random data, also, you can spcified
            </remarks>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadCustomer``1(System.String)">
            <summary>
            读取自定义类型的数据，需要规定解析规则
            </summary>
            <typeparam name="T">类型名称</typeparam>
            <param name="address">起始地址</param>
            <returns>带有成功标识的结果对象</returns>
            <remarks>
            需要是定义一个类，选择好相对于的ByteTransform实例，才能调用该方法。
            </remarks>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteCustomer``1(System.String,``0)">
            <summary>
            写入自定义类型的数据到设备去，需要规定生成字节的方法
            </summary>
            <typeparam name="T">自定义类型</typeparam>
            <param name="address">起始地址</param>
            <param name="data">实例对象</param>
            <returns>带有成功标识的结果对象</returns>
            <remarks>
            需要是定义一个类，选择好相对于的<see cref="T:HYC.HTPLC.IDataTransfer"/>实例，才能调用该方法。
            </remarks>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Read``1">
            <summary>
            从设备里读取支持Hsl特性的数据内容，该特性为<see cref="T:HYC.HTPLC.HycDeviceAddressAttribute"/>，详细参考论坛的操作说明。
            </summary>
            <typeparam name="T">自定义的数据类型对象</typeparam>
            <returns>包含是否成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write``1(``0)">
            <summary>
            从设备里读取支持Hsl特性的数据内容，该特性为<see cref="T:HYC.HTPLC.HycDeviceAddressAttribute"/>，详细参考论坛的操作说明。
            </summary>
            <typeparam name="T">自定义的数据类型对象</typeparam>
            <returns>包含是否成功的结果对象</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadInt16(System.String)">
            <summary>
            读取设备的short类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadInt16(System.String,System.UInt16)">
            <summary>
            读取设备的short类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadUInt16(System.String)">
            <summary>
            读取设备的ushort数据类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadUInt16(System.String,System.UInt16)">
            <summary>
            读取设备的ushort类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadInt32(System.String)">
            <summary>
            读取设备的int类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadInt32(System.String,System.UInt16)">
            <summary>
            读取设备的int类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadUInt32(System.String)">
            <summary>
            读取设备的uint类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadUInt32(System.String,System.UInt16)">
            <summary>
            读取设备的uint类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadFloat(System.String)">
            <summary>
            读取设备的float类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadFloat(System.String,System.UInt16)">
            <summary>
            读取设备的float类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadInt64(System.String)">
            <summary>
            读取设备的long类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadInt64(System.String,System.UInt16)">
            <summary>
            读取设备的long类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadUInt64(System.String)">
            <summary>
            读取设备的ulong类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadUInt64(System.String,System.UInt16)">
            <summary>
            读取设备的ulong类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadDouble(System.String)">
            <summary>
            读取设备的double类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadDouble(System.String,System.UInt16)">
            <summary>
            读取设备的double类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadString(System.String,System.UInt16)">
            <summary>
            读取设备的字符串数据，编码为ASCII
            </summary>
            <param name="address">起始地址</param>
            <param name="length">地址长度</param>
            <returns>带成功标志的结果数据对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadBool(System.String,System.UInt16)">
            <summary>
            批量读取底层的数据信息，需要指定地址和长度，具体的结果取决于实现
            </summary>
            <param name="address">数据地址</param>
            <param name="length">数据长度</param>
            <returns>带有成功标识的bool[]数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadBool(System.String)">
            <summary>
            读取底层的bool数据信息，具体的结果取决于实现
            </summary>
            <param name="address">数据地址</param>
            <returns>带有成功标识的bool数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.Boolean[])">
            <summary>
            写入bool数组数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.Boolean)">
            <summary>
            写入bool数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.Int16[])">
            <summary>
            向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.Int16)">
            <summary>
            向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.UInt16[])">
            <summary>
            向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.UInt16)">
            <summary>
            向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.Int32[])">
            <summary>
            向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.Int32)">
            <summary>
            向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.UInt32[])">
            <summary>
            向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.UInt32)">
            <summary>
            向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.Single[])">
            <summary>
            向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.Single)">
            <summary>
            向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.Int64[])">
            <summary>
            向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.Int64)">
            <summary>
            向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.UInt64[])">
            <summary>
            向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.UInt64)">
            <summary>
            向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.Double[])">
            <summary>
            向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.Double)">
            <summary>
            向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteString" title="String类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.Write(System.String,System.String,System.Int32)">
            <summary>
            向设备中写入指定长度的字符串,超出截断，不够补0，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteUnicodeString(System.String,System.String)">
            <summary>
            向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteUnicodeString(System.String,System.String,System.Int32)">
            <summary>
            向设备中写入指定长度的字符串,超出截断，不够补0，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadBoolAsync(System.String,System.UInt16)">
            <summary>
            批量读取底层的数据信息，需要指定地址和长度，具体的结果取决于实现
            </summary>
            <param name="address">数据地址</param>
            <param name="length">数据长度</param>
            <returns>带有成功标识的bool[]数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadBoolAsync(System.String)">
            <summary>
            读取底层的bool数据信息，具体的结果取决于实现
            </summary>
            <param name="address">数据地址</param>
            <returns>带有成功标识的bool数组</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.Boolean[])">
            <summary>
            写入bool数组数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.Boolean)">
            <summary>
            写入bool数据
            </summary>
            <param name="address">起始地址</param>
            <param name="value">写入值</param>
            <returns>带有成功标识的结果类对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadAsync(System.String,System.UInt16)">
            <summary>
            使用异步的操作从原始的设备中读取数据信息
            </summary>
            <param name="address">起始地址</param>
            <param name="length">地址长度</param>
            <returns>带有成功标识的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadInt16Async(System.String)">
            <summary>
            异步读取设备的short类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadInt16Async" title="Int16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadInt16Async(System.String,System.UInt16)">
            <summary>
            异步读取设备的ushort类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadInt16ArrayAsync" title="Int16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadUInt16Async(System.String)">
            <summary>
            异步读取设备的ushort数据类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadUInt16Async" title="UInt16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadUInt16Async(System.String,System.UInt16)">
            <summary>
            异步读取设备的ushort类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadUInt16ArrayAsync" title="UInt16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadInt32Async(System.String)">
            <summary>
            异步读取设备的int类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadInt32Async" title="Int32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadInt32Async(System.String,System.UInt16)">
            <summary>
            异步读取设备的int类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadInt32ArrayAsync" title="Int32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadUInt32Async(System.String)">
            <summary>
            异步读取设备的uint类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadUInt32Async" title="UInt32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadUInt32Async(System.String,System.UInt16)">
            <summary>
            异步读取设备的uint类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadUInt32ArrayAsync" title="UInt32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadFloatAsync(System.String)">
            <summary>
            异步读取设备的float类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadFloatAsync" title="Float类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadFloatAsync(System.String,System.UInt16)">
            <summary>
            异步读取设备的float类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadFloatArrayAsync" title="Float类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadInt64Async(System.String)">
            <summary>
            异步读取设备的long类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadInt64Async" title="Int64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadInt64Async(System.String,System.UInt16)">
            <summary>
            异步读取设备的long类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadInt64ArrayAsync" title="Int64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadUInt64Async(System.String)">
            <summary>
            异步读取设备的ulong类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadUInt64Async" title="UInt64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadUInt64Async(System.String,System.UInt16)">
            <summary>
            异步读取设备的ulong类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadUInt64ArrayAsync" title="UInt64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadDoubleAsync(System.String)">
            <summary>
            异步读取设备的double类型的数据
            </summary>
            <param name="address">起始地址</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadDoubleAsync" title="Double类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadDoubleAsync(System.String,System.UInt16)">
            <summary>
            异步读取设备的double类型的数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadDoubleArrayAsync" title="Double类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadStringAsync(System.String,System.UInt16)">
            <summary>
            异步读取设备的字符串数据，编码为ASCII
            </summary>
            <param name="address">起始地址</param>
            <param name="length">地址长度</param>
            <returns>带成功标志的结果数据对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadStringAsync" title="String类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.Byte[])">
            <summary>
            异步将原始数据写入设备
            </summary>
            <param name="address">起始地址</param>
            <param name="value">原始数据</param>
            <returns>带有成功标识的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteAsync" title="bytes类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.Int16[])">
            <summary>
            异步向设备中写入short数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteInt16ArrayAsync" title="Int16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.Int16)">
            <summary>
            异步向设备中写入short数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteInt16Async" title="Int16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.UInt16[])">
            <summary>
            异步向设备中写入ushort数组，返回是否写入成功
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="values">要写入的实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteUInt16ArrayAsync" title="UInt16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.UInt16)">
            <summary>
            异步向设备中写入ushort数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteUInt16Async" title="UInt16类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.Int32[])">
            <summary>
            异步向设备中写入int数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteInt32ArrayAsync" title="Int32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.Int32)">
            <summary>
            异步向设备中写入int数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteInt32Async" title="Int32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.UInt32[])">
            <summary>
            异步向设备中写入uint数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteUInt32ArrayAsync" title="UInt32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.UInt32)">
            <summary>
            异步向设备中写入uint数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteUInt32Async" title="UInt32类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.Single[])">
            <summary>
            异步向设备中写入float数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>返回写入结果</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteFloatArrayAsync" title="Float类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.Single)">
            <summary>
            异步向设备中写入float数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>返回写入结果</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteFloatAsync" title="Float类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.Int64[])">
            <summary>
            异步向设备中写入long数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteInt64ArrayAsync" title="Int64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.Int64)">
            <summary>
            异步向设备中写入long数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteInt64Async" title="Int64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.UInt64[])">
            <summary>
            异步向P设备中写入ulong数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteUInt64ArrayAsync" title="UInt64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.UInt64)">
            <summary>
            异步向设备中写入ulong数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteUInt64Async" title="UInt64类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.Double[])">
            <summary>
            异步向设备中写入double数组，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="values">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteDoubleArrayAsync" title="Double类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.Double)">
            <summary>
            异步向设备中写入double数据，返回是否写入成功
            </summary>
            <param name="address">数据地址</param>
            <param name="value">实际数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteDoubleAsync" title="Double类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.String)">
            <summary>
            异步向设备中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteStringAsync" title="String类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync(System.String,System.String,System.Int32)">
            <summary>
            异步向设备中写入指定长度的字符串,超出截断，不够补0，编码格式为ASCII
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
            <example>
            以下为三菱的连接对象示例，其他的设备读写情况参照下面的代码：
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteString2Async" title="String类型示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteUnicodeStringAsync(System.String,System.String)">
            <summary>
            异步向设备中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <returns>是否写入成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteUnicodeStringAsync(System.String,System.String,System.Int32)">
            <summary>
            异步向设备中写入指定长度的字符串,超出截断，不够补0，编码格式为Unicode
            </summary>
            <param name="address">数据地址</param>
            <param name="value">字符串数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>是否写入成功的结果对象 -> Whether to write a successful result object</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadCustomerAsync``1(System.String)">
            <summary>
            异步读取自定义类型的数据，需要规定解析规则
            </summary>
            <typeparam name="T">类型名称</typeparam>
            <param name="address">起始地址</param>
            <returns>带有成功标识的结果对象</returns>
            <remarks>
            需要是定义一个类，选择好相对于的ByteTransform实例，才能调用该方法。
            </remarks>
            <example>
            此处演示三菱的读取示例，先定义一个类，实现<see cref="T:HYC.HTPLC.IDataTransfer"/>接口
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="IDataTransfer Example" title="DataMy示例" />
            接下来就可以实现数据的读取了
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="ReadCustomerAsyncExample" title="ReadCustomerAsync示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteCustomerAsync``1(System.String,``0)">
            <summary>
            异步写入自定义类型的数据到设备去，需要规定生成字节的方法
            </summary>
            <typeparam name="T">自定义类型</typeparam>
            <param name="address">起始地址</param>
            <param name="data">实例对象</param>
            <returns>带有成功标识的结果对象</returns>
            <remarks>
            需要是定义一个类，选择好相对于的<see cref="T:HYC.HTPLC.IDataTransfer"/>实例，才能调用该方法。
            </remarks>
            <example>
            此处演示三菱的读取示例，先定义一个类，实现<see cref="T:HYC.HTPLC.IDataTransfer"/>接口
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="IDataTransfer Example" title="DataMy示例" />
            接下来就可以实现数据的读取了
            <code lang="cs" source="HYC.HTPLC_Net45.Test\Documentation\Samples\Core\NetworkDeviceBase.cs" region="WriteCustomerAsyncExample" title="WriteCustomerAsync示例" />
            </example>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ReadAsync``1">
            <summary>
            异步从设备里读取支持Hsl特性的数据内容，该特性为<see cref="T:HYC.HTPLC.HycDeviceAddressAttribute"/>，详细参考论坛的操作说明。
            </summary>
            <typeparam name="T">自定义的数据类型对象</typeparam>
            <returns>包含是否成功的结果对象</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.WriteAsync``1(``0)">
            <summary>
            异步从设备里读取支持Hsl特性的数据内容，该特性为<see cref="T:HYC.HTPLC.HycDeviceAddressAttribute"/>，详细参考论坛的操作说明。
            </summary>
            <typeparam name="T">自定义的数据类型对象</typeparam>
            <returns>包含是否成功的结果对象</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:HYC.HTPLC.Serial.SerialDeviceBase`1.ToString">
            <summary>
            返回表示当前对象的字符串
            </summary>
            <returns>字符串数据</returns>
        </member>
        <member name="T:HYC.HTPLC.Serial.SoftLRC">
            <summary>
            用于LRC验证的类，提供了标准的验证方法
            </summary>
        </member>
        <member name="M:HYC.HTPLC.Serial.SoftLRC.LRC(System.Byte[])">
            <summary>
            获取对应的数据的LRC校验码
            </summary>
            <param name="value">需要校验的数据，不包含LRC字节</param>
            <returns>返回带LRC校验码的字节数组，可用于串口发送</returns>
        </member>
        <member name="M:HYC.HTPLC.Serial.SoftLRC.CheckLRC(System.Byte[])">
            <summary>
            检查对应的数据是否符合LRC的验证
            </summary>
            <param name="value">等待校验的数据，是否正确</param>
            <returns>是否校验成功</returns>
        </member>
        <member name="T:HYC.HTPLC.StringResources">
            <summary>
            系统的字符串资源及多语言管理中心
            </summary>
        </member>
        <member name="F:HYC.HTPLC.StringResources.Language">
            <summary>
            获取或设置系统的语言选项 ->
            Gets or sets the language options for the system
            </summary>
        </member>
        <member name="M:HYC.HTPLC.StringResources.SetLanguageChinese">
            <summary>
            将语言设置为中文 ->
            Set the language to Chinese
            </summary>
        </member>
        <member name="M:HYC.HTPLC.StringResources.SeteLanguageEnglish">
            <summary>
            将语言设置为英文 ->
            Set the language to English
            </summary>
        </member>
    </members>
</doc>
